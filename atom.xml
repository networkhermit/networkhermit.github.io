<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>hi, I’m vac</title>
	<link href="https://blog.vac.fun/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.vac.fun"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-08-17T00:00:00+00:00</updated>
	<id>https://blog.vac.fun/atom.xml</id>
	<entry xml:lang="en">
		<title>LWN: The seven deadly sins of software deployment</title>
		<published>2022-08-17T00:00:00+00:00</published>
		<updated>2022-08-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220817-lwn/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220817-lwn/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;The odds of deployment failure approach 100% as the number of distinct change sets approaches seven.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If three or more things have gone wrong, roll back.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Three Strikes Rule&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;562333&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Objective Analysis White Paper: The Future of the Data Center: Memory and Storage Take on an Increasing Role</title>
		<published>2022-08-17T00:00:00+00:00</published>
		<updated>2022-08-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220817-objective-analysis/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220817-objective-analysis/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;reducing data movement&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;offloading processing&lt;&#x2F;strong&gt; (In-Situ Processing)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Processor in Memory&#x2F;Computational Storage&lt;&#x2F;li&gt;
&lt;li&gt;Edge and Endpoint Processing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Near Memory&#x2F;Storage &#x2F; Far Memory&#x2F;Storage&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As computers share an increasing number of resources, memory has been given a new role. It is no longer simply a fast place to temporarily save code and data for a single processor, but is now blossoming into a role in which it also rapidly shares data between processors.&lt;&#x2F;p&gt;
&lt;p&gt;This changes the memory’s role from fast temporary storage to one in which it serves as a communications medium. If we add in situ processing to that we find that memory begins to take on roles once devoted to processing and storage.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Compute_Express_Link&quot;&gt;Compute Express Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;objective-analysis.com&#x2F;wp-content&#x2F;uploads&#x2F;2022&#x2F;08&#x2F;Objective-Analysis-Brief-The-Future-of-the-Data-Center.pdf&quot;&gt;Link [pdf]&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Uber Engineering Paper: A Study of Real-World Data Races in Golang</title>
		<published>2022-08-17T00:00:00+00:00</published>
		<updated>2022-08-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220817-uber/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220817-uber/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Observation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Developers using Go employ significantly more concurrency and synchronization constructs than in Java.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Developers using Go for programming microservices expose significantly more runtime concurrency than other languages such as Java, Python, and NodeJS used for the same purpose.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Transparent capture-by-reference of free variables in goroutines is a recipe for data races.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Slices are highly confusing types that create subtle and hard to diagnose data races.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Built-in maps in Go make them commonly used. The array-style syntax of map accesses provides a false illusion of disjoint accesses of elements. However, map implementation is thread-unsafe in Go causing frequent data races.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Pass-by-value semantics are recommended in Go because it simplifies escape analysis and gives variables a better chance to be allocated on the stack, which reduces pressure on the garbage collector. Developers often err on the side of pass-by-value (or methods over values), which can cause non-trivial data races.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Mixed use of message passing (channels) and shared memory makes code complex and susceptible to data races.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Go offers more leeway in its group synchronization construct sync.WaitGroup. The number of participants is dynamic. Incorrect placement of Add and Done methods of a sync.WaitGroup lead to data races.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Running tests in parallel for Go’s table-driven test suite idiom can often cause data races, either in the product or test code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Incorrect use of mutual exclusion primitives leads to data races.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Remark&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Future programming language designers should carefully weigh different language features and coding idioms with their potential to create common or arcane concurrency bugs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Explicit is better than implicit.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2204.00764&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.uber.com&#x2F;blog&#x2F;dynamic-data-race-detection-in-go-code&#x2F;&quot;&gt;Dynamic Data Race Detection in Go Code&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.uber.com&#x2F;blog&#x2F;data-race-patterns-in-go&#x2F;&quot;&gt;Data Race Patterns in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>FS Blog: Focused and Diffuse: Two Modes of Thinking</title>
		<published>2022-08-16T00:00:00+00:00</published>
		<updated>2022-08-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220816-fs/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220816-fs/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;As she lost consciousness of outer things … her mind kept throwing up from its depths, scenes, and names, and sayings, and memories and ideas, like a fountain spurting.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Virginia Woolf, To the Lighthouse&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;consciousness… ebbs like a breaking wave, outwardly expanding and then inwardly retreating. This perennial rhythm of the mind—extracting information from the external world, withdrawing to inner musings, and then returning to the outer realm—defines mental life.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The Middle Way: Finding the Balance between Mindfulness and Mind-Wandering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Both modes of thinking are equally valuable, but it’s the harmony between them that matters. Learning a complex skill —a language, a musical instrument, chess, a mental model—requires both modes to work together. We master the details in focused mode, then comprehend how everything fits together in diffuse mode. It’s about combining creativity with execution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;History is peppered with examples of serendipitous discoveries and ideas that combined diffuse and focused thinking. In many cases, the broad insight came during diffuse thinking periods, while the concrete development work was accomplished in focused mode.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fs.blog&#x2F;focused-diffuse-thinking&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;Slack consists of excess resources: excess capacity allowing for responsiveness and flexibility. It is the time when reinvention happens.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fs.blog&#x2F;slack&#x2F;&quot;&gt;Efficiency is the Enemy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Speeding up often results in poor decisions that create future problems. While experience and education can grant you the pattern-matching abilities to make some kinds of decisions using intuition, you’re still going to run into decisions that require you to sit and consider the problem from multiple angles.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fs.blog&#x2F;thinking-rate-fixed&#x2F;&quot;&gt;Your Thinking Rate Is Fixed&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Neon: Why does Neon use Paxos instead of Raft, and what&#x27;s the difference?</title>
		<published>2022-08-16T00:00:00+00:00</published>
		<updated>2022-08-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220816-neon/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220816-neon/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;All happy databases are alike; each unhappy database is unhappy in its own way.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Kyle Kingsbury&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Postgres + agent + consensus store&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Patroni and Stolon&lt;&#x2F;li&gt;
&lt;li&gt;etcd, ZooKeeper, or Consul&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Raft and Paxos operate under the following assumptions: computers can crash or restart and lose in-memory state, but the disk state will be preserved upon restart; the network may lose or duplicate messages but can&#x27;t generate them out of thin air, and eventually, some messages would be delivered.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Separating storage and compute&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Postgres Compute&lt;&#x2F;li&gt;
&lt;li&gt;WAL Service: Safekeeper (distributed consensus)&lt;&#x2F;li&gt;
&lt;li&gt;Pageserver: main storage&lt;&#x2F;li&gt;
&lt;li&gt;Object Storage: cold storage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;neon.tech&#x2F;blog&#x2F;architecture-decisions-in-neon&#x2F;&quot;&gt;Architecture decisions in Neon&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;TLA%2B&quot;&gt;TLA+&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;neon.tech&#x2F;blog&#x2F;paxos&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2004.05074&quot;&gt;Paxos vs Raft: Have we reached consensus on distributed consensus?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Upbound: Scaling Kubernetes to Thousands of CRDs</title>
		<published>2022-08-16T00:00:00+00:00</published>
		<updated>2022-08-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220816-upbound/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220816-upbound/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.upbound.io&#x2F;scaling-kubernetes-to-thousands-of-crds&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;flow-control&#x2F;&quot;&gt;API Priority and Fairness&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>architecture notes: Redis Explained</title>
		<published>2022-08-15T00:00:00+00:00</published>
		<updated>2022-08-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220815-architecturenotes/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220815-architecturenotes/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;As a general rule, it is essential to have an odd number of primary nodes and two replicas each for the most robust setup. (&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Split-brain_(computing)&quot;&gt;Split-brain (computing)&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;architecturenotes.co&#x2F;redis&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python⇒Speed: Finding performance problems: profiling or logging?</title>
		<published>2022-08-14T00:00:00+00:00</published>
		<updated>2022-08-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220814-pythonspeed/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220814-pythonspeed/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;tracing&lt;&#x2F;li&gt;
&lt;li&gt;profiling&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;articles&#x2F;logging-vs-profiling&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Super Fast Python: How to Choose the Right Python Concurrency API</title>
		<published>2022-08-10T00:00:00+00:00</published>
		<updated>2022-08-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220810-superfastpython/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220810-superfastpython/</id>
		<content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Coroutine-based&lt;&#x2F;li&gt;
&lt;li&gt;Thread-based&lt;&#x2F;li&gt;
&lt;li&gt;Process-based&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Global_interpreter_lock&quot;&gt;Global interpreter lock&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;superfastpython.com&#x2F;python-concurrency-choose-api&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Andrew Gallant&#x27;s Blog: Using unwrap() in Rust is Okay</title>
		<published>2022-08-09T00:00:00+00:00</published>
		<updated>2022-08-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220809-burntsushi/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220809-burntsushi/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;don’t use panicking as an error handling strategy&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;don’t let perfect be the enemy of the good&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Panics are the singular reason why bugs often don’t require running Rust programs in a debugger.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;unwrap&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>stuff by danvet: Locking Engineering Hierarchy</title>
		<published>2022-08-04T00:00:00+00:00</published>
		<updated>2022-08-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220804-ffwll/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220804-ffwll/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;This part goes through a pile of locking patterns and designs, from most favourable and easiest to adjust and hence resulting in a long term maintainable code base, to the least favourable since hardest to ensure it works correctly and stays that way while the code evolves.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Level 0: No Locking&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Locking Pattern: Immutable State&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Single Owner&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Reference Counting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Level 1: Big Dumb Lock&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Level 2: Fine-grained Locking&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Locking Pattern: Object Tracking Lists&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Interrupt Handler State&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Async Processing&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Weak References&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: Confusing Object Lifetime and Data Consistency&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Level 2.5: Splitting Locks for Performance Reasons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We’ve looked at a pile of functional reasons for complicating the locking design, but sometimes you need to add more fine-grained locking for performance reasons. This is already getting dangerous, because it’s very tempting to tune some microbenchmark just because we can, or maybe delude ourselves that it will be needed in the future. Therefore only complicate your locking if:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You have actual real world benchmarks with workloads relevant to users that show measurable gains outside of statistical noise.&lt;&#x2F;li&gt;
&lt;li&gt;You’ve fully exhausted architectural changes to outright avoid the overhead, like io_uring pre-registering file descriptors locally to avoid manipulating the file descriptor table.&lt;&#x2F;li&gt;
&lt;li&gt;You’ve fully exhausted algorithm improvements like batching up operations to amortize locking overhead better.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Only then make your future maintenance pain guaranteed worse by applying more tricky locking than the bare minimum necessary for correctness. Still, go with the simplest approach, often converting a lock to its read-write variant is good enough.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Level 3: Lockless Tricks&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Locking Antipattern: Using RCU&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: Atomics&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: &lt;code&gt;preempt&#x2F;local_irq&#x2F;bh_disable()&lt;&#x2F;code&gt; and Friends …&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: Memory Barriers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Closing Thoughts&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Simple, dumb locking is good locking, since with that you have a fighting chance to make it correct locking.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.ffwll.ch&#x2F;2022&#x2F;08&#x2F;locking-hierarchy.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;844224&#x2F;&quot;&gt;An introduction to lockless algorithms&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Aiken &amp; Driscoll: The Illustrated TLS 1.3 Connection</title>
		<published>2022-08-04T00:00:00+00:00</published>
		<updated>2022-08-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220804-xargs/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220804-xargs/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;In this demonstration a client connects to a server, negotiates a TLS 1.3 session, sends &amp;quot;ping&amp;quot;, receives &amp;quot;pong&amp;quot;, and then terminates the session.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tls13.xargs.org&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;quic.xargs.org&quot;&gt;The Illustrated QUIC Connection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ivan Velichko: How Kubernetes Reinvented Virtual Machines (in a good sense)</title>
		<published>2022-08-01T00:00:00+00:00</published>
		<updated>2022-08-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220801-iximiuz/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220801-iximiuz/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;We should differentiate between the complexity of driving a car and the complexity of repairing it. Many of us can drive cars, but very few are good at fixing engines.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Early-stage startups shouldn&#x27;t run on Kubernetes yet.&lt;&#x2F;p&gt;
&lt;p&gt;But eventually, growth-stage and large companies &lt;em&gt;should&lt;&#x2F;em&gt; be running on Kubernetes in some form.&lt;&#x2F;p&gt;
&lt;p&gt;Infrastructure should progressively grow with your workloads and team.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matt-rickard.com&#x2F;dont-use-kubernetes-yet&quot;&gt;Don&#x27;t Use Kubernetes, Yet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;kubernetes-vs-virtual-machines&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>stuff by danvet: Locking Engineering Principles</title>
		<published>2022-07-29T00:00:00+00:00</published>
		<updated>2022-07-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220729-ffwll/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220729-ffwll/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Priorities in Locking Engineering&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make it Dumb&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Designing a correct locking scheme is hard, validating that your code actually implements your design is harder, and then debugging when - not if! - you screwed up is even worse. Therefore the absolute most important rule in locking engineering, at least if you want to have any chance at winning this game, is to make the design as simple and dumb as possible.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make it Correct&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Validating locking by hand against all the other locking designs and nesting rules the kernel has overall is nigh impossible, extremely slow, something only few people can do with any chance of success and hence in almost all cases a complete waste of time. We need tools to automate this, and in the Linux kernel this is lockdep.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Never invent your own locking primitives, you’ll get them wrong, or at least build something that’s slow. The kernel’s locks are built and tuned by people who’ve done nothing else their entire career, you wont beat them except in bug count, and that by a lot.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The same holds for synchronization primitives.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Finally at the intersection of “make it dumb” and “make it correct”, pick the simplest lock that works, like a normal mutex instead of an read-write semaphore. This is because in general, stricter rules catch bugs and design issues quicker, hence picking a very fancy “anything goes” locking primitives is a bad choice.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Make it Fast&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Speed doesn’t matter if you don’t understand the design anymore in the future, you need simplicity first.&lt;&#x2F;p&gt;
&lt;p&gt;Speed doesn’t matter if all you’re doing is crashing faster. You need correctness before speed.&lt;&#x2F;p&gt;
&lt;p&gt;Finally speed doesn’t matter where users don’t notice it. If you micro-optimize a path that doesn’t even show up in real world workloads users care about, all you’ve done is wasted time and committed to future maintenance pain for no gain at all.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protect Data, not Code&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A common pitfall is to design locking by looking at the code, perhaps just sprinkling locking calls over it until it feels like it’s good enough. The right approach is to design locking for the data structures, which means specifying for each structure or member field how it is protected against concurrent changes, and how the necessary amount of consistency is maintained across the entire data structure with rules that stay invariant, irrespective of how code operates on the data.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.ffwll.ch&#x2F;2022&#x2F;07&#x2F;locking-engineering.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>WireGuard Interworkings: Routing &amp; Network Namespace Integration</title>
		<published>2022-07-27T00:00:00+00:00</published>
		<updated>2022-07-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220727-wireguard/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220727-wireguard/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Routing All Your Traffic&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The Classic Solutions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Overriding The Default Route&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add 0.0.0.0&#x2F;1 dev wg0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add 128.0.0.0&#x2F;1 dev wg0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add 163.172.161.0&#x2F;32 via 192.168.1.1 dev eth0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rule-based Routing&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt; set wg0 fwmark 1234
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add default dev wg0 table 2468
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; rule add not fwmark 1234 table 2468
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; rule add table main suppress_prefixlength 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The New Namespace Solution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; netns add physical
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; link set eth0 netns physical
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;iw&lt;&#x2F;span&gt;&lt;span&gt; phy phy0 set netns name physical
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; -n physical link add wg0 type wireguard
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; -n physical link set wg0 netns 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; netns exec physical dhcpcd wlan0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; netns exec physical wpa_supplicant -iwlan0 -c&#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; -n physical addr add 192.168.12.52&#x2F;24 dev eth0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt; setconf wg0 &#x2F;etc&#x2F;wireguard&#x2F;wg0.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; addr add 10.2.4.5&#x2F;32 dev wg0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; link set wg0 up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add default dev wg0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wireguard.com&#x2F;netns&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;container-networking-is-simple&#x2F;&quot;&gt;Container Networking Is Simple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Isovalent Blog: Cilium Service Mesh – Everything You Need to Know</title>
		<published>2022-07-26T00:00:00+00:00</published>
		<updated>2022-07-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220726-isovalent/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220726-isovalent/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Looking at the feature set of a service mesh today, it can be summarized as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resilient Connectivity&lt;&#x2F;strong&gt;: Service to service communication must be possible across boundaries such as clouds, clusters, and premises. Communication must be resilient and fault tolerant.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;L7 Traffic Management&lt;&#x2F;strong&gt;: Load balancing, rate limiting, and resiliency must be L7-aware (HTTP, REST, gRPC, WebSocket, …).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identity-based Security&lt;&#x2F;strong&gt;: Relying on network identifiers to achieve security is no longer sufficient, both the sending and receiving services must be able to authenticate each other based on identities instead of a network identifier.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Observability &amp;amp; Tracing&lt;&#x2F;strong&gt;: Observability in the form of tracing and metrics is critical to understanding, monitoring, and troubleshooting application stability, performance, and availability.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transparency&lt;&#x2F;strong&gt;: The functionality must be available to applications in a transparent manner, i.e. without requiring to change application code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;eBPF-Native When Possible&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If eBPF is not capable of processing the request, for example when connections need to be spliced, requests need to be rate-limited, or TLS termination is required, the handling falls back to Envoy running in either a sidecar or sidecar-free model. This gives the best of both worlds – eBPF processing when possible for increased performance and reduced latency, with the ability always to fall back to Envoy as needed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mTLS for Any Network Protocol&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;By splitting the authentication handshake from the payload transport, we can use TLS 1.3 as the handshake protocol while relying on IPsec or WireGuard as a better-performing, more transparent payload channel.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;cilium-service-mesh&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;2021-12-08-ebpf-servicemesh&#x2F;&quot;&gt;How eBPF will solve Service Mesh – Goodbye Sidecars&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;2022-05-03-servicemesh-security&#x2F;&quot;&gt;Next-Generation Mutual Authentication with Cilium Service Mesh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
