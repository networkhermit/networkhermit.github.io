<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>hi, I’m vac</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vac.fun/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vac.fun"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-08-31T00:00:00+00:00</updated>
    <id>https://blog.vac.fun/atom.xml</id>
    <entry xml:lang="en">
        <title>Netflix Technology Blog: Investigation of a Cross-regional Network Performance Issue</title>
        <published>2024-08-31T00:00:00+00:00</published>
        <updated>2024-08-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20240831-netflixtechblog/"/>
        <id>https://blog.vac.fun/prism/20240831-netflixtechblog/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20240831-netflixtechblog/">&lt;blockquote&gt;
&lt;p&gt;Simply put, &lt;strong&gt;the TCP receive window is how the receiver tells the sender “This is how many bytes
you can send me without me ACKing any of them”.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, &lt;strong&gt;the receive window size halved after the kernel upgrade. Hence the throughput was cut in
half, causing the data transfer time to double.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;While it technically wasn’t the “network” to blame, this time it turned out the culprit was the
software components that make up the network (i.e. the TCP implementation in the kernel).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;netflixtechblog.com&#x2F;investigation-of-a-cross-regional-network-performance-issue-422d6218fdf1&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ACM: Reflections on trusting trust</title>
        <published>2024-04-06T00:00:00+00:00</published>
        <updated>2024-04-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20240406-acm/"/>
        <id>https://blog.vac.fun/prism/20240406-acm/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20240406-acm/">&lt;blockquote&gt;
&lt;p&gt;To what extent should one trust a statement that a program is free of Trojan horses? Perhaps it is
more important to trust the people who wrote the software.&lt;&#x2F;p&gt;
&lt;p&gt;— Ken Thompson&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;10.1145&#x2F;358198.358210&quot;&gt;Reflections on Trusting Trust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2024&#x2F;03&#x2F;29&#x2F;4&quot;&gt;backdoor in upstream xz&#x2F;liblzma leading to ssh server compromise&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;research.swtch.com&#x2F;xz-timeline&quot;&gt;Timeline of the xz open source attack&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pducklin.com&#x2F;2024&#x2F;03&#x2F;30&#x2F;scary-ssh-backdoor-malware-in-linux-supply-chain-how-to-find-and-fix-it&#x2F;&quot;&gt;Scary SSH backdoor malware in Linux supply chain: How to find and fix it!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pducklin.com&#x2F;2024&#x2F;04&#x2F;10&#x2F;fallout-from-xz-ssh-supply-chain-attack-continues&#x2F;&quot;&gt;Fallout from XZ&#x2F;SSH supply chain attack continues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Macbeth and Kafka</title>
        <published>2024-02-28T00:00:00+00:00</published>
        <updated>2024-02-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/posts/20240228-macbeth-and-kafka/"/>
        <id>https://blog.vac.fun/posts/20240228-macbeth-and-kafka/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/posts/20240228-macbeth-and-kafka/">&lt;blockquote&gt;
&lt;p&gt;It is a tale told by an idiot, full of sound and fury, signifying nothing.&lt;&#x2F;p&gt;
&lt;p&gt;— Macbeth&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two cardinal sins from which all others spring: Impatience and Laziness.&lt;&#x2F;p&gt;
&lt;p&gt;— Franz Kafka&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Matt Rants: BSD for Linux Users</title>
        <published>2023-12-24T00:00:00+00:00</published>
        <updated>2023-12-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20231224-over-yonder/"/>
        <id>https://blog.vac.fun/prism/20231224-over-yonder/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20231224-over-yonder/">&lt;blockquote&gt;
&lt;p&gt;Linux, with its chaotic tinkering background, naturally appeals to a different personality, in
general, than BSD with its academic and rigorous background.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.over-yonder.net&#x2F;~fullermd&#x2F;rants&#x2F;bsd4linux&#x2F;01&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>MIT Technology Review: These six questions will dictate the future of generative AI</title>
        <published>2023-12-24T00:00:00+00:00</published>
        <updated>2023-12-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20231224-technologyreview/"/>
        <id>https://blog.vac.fun/prism/20231224-technologyreview/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20231224-technologyreview/">&lt;blockquote&gt;
&lt;p&gt;Here’s the catch: it is impossible to know all the ways a technology will be misused until it is
used.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Will we ever mitigate the bias problem?&lt;&#x2F;li&gt;
&lt;li&gt;How will AI change the way we apply copyright?&lt;&#x2F;li&gt;
&lt;li&gt;How will it change our jobs?&lt;&#x2F;li&gt;
&lt;li&gt;What misinformation will it make possible?&lt;&#x2F;li&gt;
&lt;li&gt;Will we come to grips with its costs?&lt;&#x2F;li&gt;
&lt;li&gt;Will doomerism continue to dominate policymaking?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.technologyreview.com&#x2F;2023&#x2F;12&#x2F;19&#x2F;1084505&#x2F;generative-ai-artificial-intelligence-bias-jobs-copyright-misinformation&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Linux Journal: Remotely Wipe a Server</title>
        <published>2023-09-01T00:00:00+00:00</published>
        <updated>2023-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20230901-linuxjournal/"/>
        <id>https://blog.vac.fun/prism/20230901-linuxjournal/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20230901-linuxjournal/">&lt;blockquote&gt;
&lt;p&gt;With Linux, I&#x27;ve always felt that I was limited only by my own programming and problem-solving
abilities, no matter what problem presented itself.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; -i
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;shm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;shred&lt;&#x2F;span&gt;&lt;span&gt; -n2 -z -v &#x2F;dev&#x2F;vda
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;sysrq
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc&#x2F;sysrq-trigger
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linuxjournal.com&#x2F;content&#x2F;remotely-wipe-server&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Gruntwork Blog: The future of Terraform must be open</title>
        <published>2023-08-16T00:00:00+00:00</published>
        <updated>2023-08-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20230816-gruntwork/"/>
        <id>https://blog.vac.fun/prism/20230816-gruntwork/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20230816-gruntwork/">&lt;blockquote&gt;
&lt;p&gt;the BSL license is a poison pill for Terraform which threatens the entire community and ecosystem&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We believe that the essential building blocks of the modern Internet—tools such as Linux,
Kubernetes, and Terraform—must be truly open source. That is the only way to ensure that we are
building our industry on top of solid and predictable underpinnings.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.gruntwork.io&#x2F;the-future-of-terraform-must-be-open-ab0b9ba65bca&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bram Moolenaar :h 42</title>
        <published>2023-08-05T00:00:00+00:00</published>
        <updated>2023-08-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/posts/20230805-bram-moolenaar/"/>
        <id>https://blog.vac.fun/posts/20230805-bram-moolenaar/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/posts/20230805-bram-moolenaar/">&lt;p&gt;R.I.P.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span&gt; -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;:h 42&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the meaning of life, the universe and everything?  42&lt;&#x2F;p&gt;
&lt;p&gt;Douglas Adams, the only person who knew what this question really was about is
now dead, unfortunately.  So now you might wonder what the meaning of death
is...&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;bram_moolenaar_in_2007.jpg&quot; alt=&quot;Bram Moolenaar in 2007&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Help poor children in Uganda!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;vim_drill_big.jpg&quot; alt=&quot;Vim Drill&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mahesh&#x27;s blog: What we talk about when we talk about System Design</title>
        <published>2023-07-23T00:00:00+00:00</published>
        <updated>2023-07-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20230723-mahesh/"/>
        <id>https://blog.vac.fun/prism/20230723-mahesh/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20230723-mahesh/">&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Late-bind on designs&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The goal of the design process is not to generate a single point solution, but to instead
characterize the design space for a given problem: a single point should then fall naturally out
of that space given the problem constraints. Converging early on a single design is harmful; the
team should have the ability to jump from one part of the space to another right until a solution
is picked.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Each point solution is a DoS attack on the design process&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Talking about individual designs in isolation slows down design. Talking about designs in the
context of the design space accelerates design. New designs should be described in terms of the
design space, so you can immediately convey their relative position compared to other point
solutions.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Think in parallel; Design together; Implement in parallel; Review together&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Certain parts of the design and development process are creative and should be parallelized &#x2F;
sharded, while others require discipline and should be centralized &#x2F; broadcast.&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Talk about the problem, not existing systems&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Solution Complexity » Problem Complexity&lt;&#x2F;li&gt;
&lt;li&gt;Solution Bias&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Always talk about a second application&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Practically, even if you are implementing only one app, it helps to always consider a second app
(or even implement one in tests); to prevent application specifics from leaking into the
abstraction.&lt;&#x2F;p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;For each abstraction, build one implementation; plan for a second; hope for a third&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the opposite direction, you don’t want the abstraction’s semantics to rely on its
implementation details. One way to ensure this is to talk about multiple implementations in the
design process.&lt;&#x2F;p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Abstraction is not free&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Abstraction is a balancing act between two types of complexity: the complexity of concreteness and
the complexity of abstractness. Each time you add a layer of abstraction, have a precise
characterization for why it has to exist, as well as the division of functionality between this
layer and the ones around it.&lt;&#x2F;p&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Be critical (but about the right things)&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;One way to approach design is to continually de-risk the pieces that are truly unknown; while
deferring work on the pieces that are difficult but known. (In the opposite direction, researchers
need to be more focused on details and practicality, but this happens naturally in an industry
environment).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;maheshba.bitbucket.io&#x2F;blog&#x2F;2023&#x2F;07&#x2F;12&#x2F;Design.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Linux Journal: Understanding Bash: Elements of Programming</title>
        <published>2023-05-30T00:00:00+00:00</published>
        <updated>2023-05-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20230530-linuxjournal/"/>
        <id>https://blog.vac.fun/prism/20230530-linuxjournal/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20230530-linuxjournal/">&lt;blockquote&gt;
&lt;p&gt;Although Bash is primarily a command interpreter, it&#x27;s also a programming language. Bash supports
variables, functions and has control flow constructs, such as conditional statements and loops.
However, all of this comes with some unusual quirks. This is because Bash attempts to fulfill two
roles at the same time: to be a command interpreter and a programming language—and there is
tension between the two.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linuxjournal.com&#x2F;content&#x2F;understanding-bash-elements-programming&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LWN: The shrinking role of semaphores</title>
        <published>2023-04-20T00:00:00+00:00</published>
        <updated>2023-04-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20230420-lwn/"/>
        <id>https://blog.vac.fun/prism/20230420-lwn/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20230420-lwn/">&lt;blockquote&gt;
&lt;p&gt;a &lt;em&gt;classic&lt;&#x2F;em&gt; concurrency limiter&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It just goes to show that in the kernel, as elsewhere, old code can persist for a long time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;928026&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>新年快乐</title>
        <published>2023-01-10T00:00:00+00:00</published>
        <updated>2023-01-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/posts/20230110-happy-new-year/"/>
        <id>https://blog.vac.fun/posts/20230110-happy-new-year/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/posts/20230110-happy-new-year/">&lt;blockquote&gt;
&lt;p&gt;Study hard what interests you the most in the most undisciplined, irreverent and original manner
possible.&lt;&#x2F;p&gt;
&lt;p&gt;— Richard Feynmann&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Honeycomb Blog: The Future of Ops Is Platform Engineering</title>
        <published>2022-10-08T00:00:00+00:00</published>
        <updated>2022-10-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20221008-honeycomb/"/>
        <id>https://blog.vac.fun/prism/20221008-honeycomb/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20221008-honeycomb/">&lt;blockquote&gt;
&lt;p&gt;Building infrastructure and operational expertise used to be bundled together into a single role.
But the industry is now bifurcating along an infrastructure fault line, and the overlap between
infrastructure-oriented engineers and operationally-minded engineers is swiftly eroding. Engineers
who love this work increasingly have a choice to make. Either you can 1) go deep on infrastructure
by joining a company that does infrastructure as a service, or 2) go broad on operability by
joining a company to help them do as little infrastructure as possible.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Our systems are only getting more complex, more difficult to operate, and simultaneously more
critical to life on earth, which means that operational excellence has never been more desperately
needed (and if you don’t respect that, 🌈 you deserve to suffer 🌈).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Developer cycles are the scarcest resource in your company, and you want to spend as many of those
as possible on your core product: the crown jewel, the code that makes you a business. Money is
cheaper than engineering cycles, and teams that are focused on their core business will always
outperform teams whose focus is spread across dozens of non-revenue-generating projects. Let
someone else build and run all the dependencies and adjacencies.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;platform-engineering-is-what-stands-between-you-and-darkness&quot;&gt;Platform engineering is what stands between you and darkness&lt;&#x2F;h2&gt;
&lt;p&gt;When you start talking about putting software engineers on call for their own code, and generally
being more involved in production, some percentage of the time you will hear back a guttural wail
of despair: &lt;em&gt;&quot;You can&#x27;t expect me to know EVERYTHING about EVERYTHING!&quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Quite right; we can’t. Platform engineering teams are part of the answer to this perfectly
reasonable complaint. It’s not that you’re being asked to do or understand more &lt;em&gt;in toto&lt;&#x2F;em&gt;, but the
distribution of labor and responsibility is shifting:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;&#x2F;strong&gt;: some engineers wrote code, and some engineers ran code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Now&lt;&#x2F;strong&gt;: all engineers write code, and all engineers run the code they write—but we divide the areas
of responsibility by layer or function.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One of the key principles of any developer platform is that &lt;em&gt;it should be easy to do the right
things, and hard to do the wrong things&lt;&#x2F;em&gt;. It should be much simpler and easier to use the blessed
paths than anything else, and there should be friction if you go off the beaten path.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;A strong platform team has an equally deep grounding in operations experience and software
development.&lt;&#x2F;strong&gt; Individuals who are experts in both areas are fairly rare, but you can pull together
a strong, well-rounded &lt;em&gt;team&lt;&#x2F;em&gt; by assembling a mix of SWEs (with some ops experience) and ops or
DevOps engineers (with some software experience) and having them learn and grow from each other.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Platform teams typically work higher up the stack than operations, DevOps, or SRE teams do, and
they involve a great deal less infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;If a company has both a DevOps team and SRE, typically I expect to see the SRE team more on the
frontlines, involved with incidents, telemetry, etc., and DevOps teams more on the backburner,
slinging pipes and plumbing.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;That team should write libraries, generate examples, and drive standardization; ushering in
consistency, predictability, and usability. They should partner with internal teams to evaluate
use cases. They should partner with your vendors as roadmap stakeholders. They might also write
glue code and helper modules to connect disparate data sources and create cohesive visualizations.
Basically, that team becomes an integration point between your organization and the outsourced
work.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.honeycomb.io&#x2F;blog&#x2F;future-ops-platform-engineering&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Baby Steps: What I meant by the &quot;soul of Rust&quot;</title>
        <published>2022-09-21T00:00:00+00:00</published>
        <updated>2022-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20220921-smallcultfollowing/"/>
        <id>https://blog.vac.fun/prism/20220921-smallcultfollowing/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20220921-smallcultfollowing/">&lt;blockquote&gt;
&lt;p&gt;The soul of Rust, to my mind, is definitely &lt;strong&gt;not&lt;&#x2F;strong&gt; being explicit about allocation. Rather, it’s
about the struggle between a few key values — especially &lt;em&gt;productivity&lt;&#x2F;em&gt; and &lt;em&gt;versatility&lt;&#x2F;em&gt; in
tension with &lt;em&gt;transparency&lt;&#x2F;em&gt;. Rust’s goal has always been to &lt;em&gt;feel&lt;&#x2F;em&gt; like a high-level but with the
performance and control of a &lt;em&gt;low-level&lt;&#x2F;em&gt; one.&lt;&#x2F;p&gt;
&lt;p&gt;Transparent: “you can predict and control low-level details”&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Transparency gives you control&lt;&#x2F;li&gt;
&lt;li&gt;Transparency can cost performance&lt;&#x2F;li&gt;
&lt;li&gt;Transparency hurts versatility and productivity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;smallcultfollowing.com&#x2F;babysteps&#x2F;blog&#x2F;2022&#x2F;09&#x2F;19&#x2F;what-i-meant-by-the-soul-of-rust&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sysdig Blog: Understanding Kubernetes Evicted Pods</title>
        <published>2022-09-21T00:00:00+00:00</published>
        <updated>2022-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20220921-sysdig/"/>
        <id>https://blog.vac.fun/prism/20220921-sysdig/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20220921-sysdig/">&lt;blockquote&gt;
&lt;p&gt;Every day, thousands of Pods are evicted from their homes. Stranded and confused, they have to
abandon their previous lifestyle. Some of them even become nodeless. The current society, imposing
higher demands of CPU and memory, is part of the problem.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Preemption eviction
&lt;ul&gt;
&lt;li&gt;Pod Priority Classes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Node-pressure eviction
&lt;ul&gt;
&lt;li&gt;Quality of Service Classes: BestEffort, Burstable, Guaranteed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;API-initiated eviction&lt;&#x2F;li&gt;
&lt;li&gt;Taint-based eviction&lt;&#x2F;li&gt;
&lt;li&gt;Node drain eviction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sysdig.com&#x2F;blog&#x2F;kubernetes-pod-evicted&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cloudflare Blog: How we built Pingora, the proxy that connects Cloudflare to the Internet</title>
        <published>2022-09-18T00:00:00+00:00</published>
        <updated>2022-09-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vac.fun/prism/20220918-cloudflare/"/>
        <id>https://blog.vac.fun/prism/20220918-cloudflare/</id>
        
        <content type="html" xml:base="https://blog.vac.fun/prism/20220918-cloudflare/">&lt;blockquote&gt;
&lt;p&gt;NGINX worker&#x2F;process architecture limitations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;each request can only be served by a single worker: unbalanced load across all CPU cores,
requests that do CPU heavy or blocking IO tasks can slow down other requests&lt;&#x2F;li&gt;
&lt;li&gt;the connection pool is per worker: poor connection reuse, connection reuse ratio gets worse when
scale up&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;At Cloudflare, we handle traffic across the entire Internet. We have many cases of bizarre and
non-RFC compliant HTTP traffic that we have to support. This is a common dilemma across the HTTP
community and web, where there is tension between strictly following HTTP specifications and
accommodating the nuances of a wide ecosystem of potentially legacy clients or servers. Picking
one side can be a tough job.&lt;&#x2F;p&gt;
&lt;p&gt;In order to satisfy the requirements of Cloudflare&#x27;s position in the HTTP ecosystem, we needed a
robust, permissive, customizable HTTP library that can survive the wilds of the Internet and
support a variety of noncompliant use cases. The best way to guarantee that is to implement our
own.&lt;&#x2F;p&gt;
&lt;p&gt;We chose multithreading over multiprocessing in order to share resources, especially connection
pools, easily.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
