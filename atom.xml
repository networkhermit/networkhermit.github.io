<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>hi, I’m vac</title>
	<link href="https://blog.vac.fun/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.vac.fun"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-08-04T00:00:00+00:00</updated>
	<id>https://blog.vac.fun/atom.xml</id>
	<entry xml:lang="en">
		<title>stuff by danvet: Locking Engineering Hierarchy</title>
		<published>2022-08-04T00:00:00+00:00</published>
		<updated>2022-08-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220804-ffwll/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220804-ffwll/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;This part goes through a pile of locking patterns and designs, from most favourable and easiest to adjust and hence resulting in a long term maintainable code base, to the least favourable since hardest to ensure it works correctly and stays that way while the code evolves.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Level 0: No Locking&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Locking Pattern: Immutable State&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Single Owner&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Reference Counting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Level 1: Big Dumb Lock&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Level 2: Fine-grained Locking&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Locking Pattern: Object Tracking Lists&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Interrupt Handler State&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Async Processing&lt;&#x2F;li&gt;
&lt;li&gt;Locking Pattern: Weak References&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: Confusing Object Lifetime and Data Consistency&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Level 2.5: Splitting Locks for Performance Reasons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We’ve looked at a pile of functional reasons for complicating the locking design, but sometimes you need to add more fine-grained locking for performance reasons. This is already getting dangerous, because it’s very tempting to tune some microbenchmark just because we can, or maybe delude ourselves that it will be needed in the future. Therefore only complicate your locking if:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You have actual real world benchmarks with workloads relevant to users that show measurable gains outside of statistical noise.&lt;&#x2F;li&gt;
&lt;li&gt;You’ve fully exhausted architectural changes to outright avoid the overhead, like io_uring pre-registering file descriptors locally to avoid manipulating the file descriptor table.&lt;&#x2F;li&gt;
&lt;li&gt;You’ve fully exhausted algorithm improvements like batching up operations to amortize locking overhead better.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Only then make your future maintenance pain guaranteed worse by applying more tricky locking than the bare minimum necessary for correctness. Still, go with the simplest approach, often converting a lock to its read-write variant is good enough.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Level 3: Lockless Tricks&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Locking Antipattern: Using RCU&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: Atomics&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: &lt;code&gt;preempt&#x2F;local_irq&#x2F;bh_disable()&lt;&#x2F;code&gt; and Friends …&lt;&#x2F;li&gt;
&lt;li&gt;Locking Antipattern: Memory Barriers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Closing Thoughts&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Simple, dumb locking is good locking, since with that you have a fighting chance to make it correct locking.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.ffwll.ch&#x2F;2022&#x2F;08&#x2F;locking-hierarchy.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;844224&#x2F;&quot;&gt;An introduction to lockless algorithms&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Aiken &amp; Driscoll: The Illustrated TLS 1.3 Connection</title>
		<published>2022-08-04T00:00:00+00:00</published>
		<updated>2022-08-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220804-xargs/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220804-xargs/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;In this demonstration a client connects to a server, negotiates a TLS 1.3 session, sends &amp;quot;ping&amp;quot;, receives &amp;quot;pong&amp;quot;, and then terminates the session.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tls13.xargs.org&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;quic.xargs.org&quot;&gt;The Illustrated QUIC Connection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ivan Velichko: How Kubernetes Reinvented Virtual Machines (in a good sense)</title>
		<published>2022-08-01T00:00:00+00:00</published>
		<updated>2022-08-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220801-iximiuz/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220801-iximiuz/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;We should differentiate between the complexity of driving a car and the complexity of repairing it. Many of us can drive cars, but very few are good at fixing engines.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Early-stage startups shouldn&#x27;t run on Kubernetes yet.&lt;&#x2F;p&gt;
&lt;p&gt;But eventually, growth-stage and large companies &lt;em&gt;should&lt;&#x2F;em&gt; be running on Kubernetes in some form.&lt;&#x2F;p&gt;
&lt;p&gt;Infrastructure should progressively grow with your workloads and team.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matt-rickard.com&#x2F;dont-use-kubernetes-yet&quot;&gt;Don&#x27;t Use Kubernetes, Yet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;kubernetes-vs-virtual-machines&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>stuff by danvet: Locking Engineering Principles</title>
		<published>2022-07-29T00:00:00+00:00</published>
		<updated>2022-07-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220729-ffwll/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220729-ffwll/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Priorities in Locking Engineering&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make it Dumb&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Designing a correct locking scheme is hard, validating that your code actually implements your design is harder, and then debugging when - not if! - you screwed up is even worse. Therefore the absolute most important rule in locking engineering, at least if you want to have any chance at winning this game, is to make the design as simple and dumb as possible.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make it Correct&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Validating locking by hand against all the other locking designs and nesting rules the kernel has overall is nigh impossible, extremely slow, something only few people can do with any chance of success and hence in almost all cases a complete waste of time. We need tools to automate this, and in the Linux kernel this is lockdep.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Never invent your own locking primitives, you’ll get them wrong, or at least build something that’s slow. The kernel’s locks are built and tuned by people who’ve done nothing else their entire career, you wont beat them except in bug count, and that by a lot.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The same holds for synchronization primitives.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Finally at the intersection of “make it dumb” and “make it correct”, pick the simplest lock that works, like a normal mutex instead of an read-write semaphore. This is because in general, stricter rules catch bugs and design issues quicker, hence picking a very fancy “anything goes” locking primitives is a bad choice.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Make it Fast&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Speed doesn’t matter if you don’t understand the design anymore in the future, you need simplicity first.&lt;&#x2F;p&gt;
&lt;p&gt;Speed doesn’t matter if all you’re doing is crashing faster. You need correctness before speed.&lt;&#x2F;p&gt;
&lt;p&gt;Finally speed doesn’t matter where users don’t notice it. If you micro-optimize a path that doesn’t even show up in real world workloads users care about, all you’ve done is wasted time and committed to future maintenance pain for no gain at all.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protect Data, not Code&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A common pitfall is to design locking by looking at the code, perhaps just sprinkling locking calls over it until it feels like it’s good enough. The right approach is to design locking for the data structures, which means specifying for each structure or member field how it is protected against concurrent changes, and how the necessary amount of consistency is maintained across the entire data structure with rules that stay invariant, irrespective of how code operates on the data.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.ffwll.ch&#x2F;2022&#x2F;07&#x2F;locking-engineering.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>WireGuard Interworkings: Routing &amp; Network Namespace Integration</title>
		<published>2022-07-27T00:00:00+00:00</published>
		<updated>2022-07-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220727-wireguard/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220727-wireguard/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Routing All Your Traffic&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The Classic Solutions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Overriding The Default Route&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add 0.0.0.0&#x2F;1 dev wg0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add 128.0.0.0&#x2F;1 dev wg0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add 163.172.161.0&#x2F;32 via 192.168.1.1 dev eth0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rule-based Routing&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt; set wg0 fwmark 1234
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add default dev wg0 table 2468
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; rule add not fwmark 1234 table 2468
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; rule add table main suppress_prefixlength 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The New Namespace Solution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; netns add physical
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; link set eth0 netns physical
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;iw&lt;&#x2F;span&gt;&lt;span&gt; phy phy0 set netns name physical
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; -n physical link add wg0 type wireguard
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; -n physical link set wg0 netns 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; netns exec physical dhcpcd wlan0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; netns exec physical wpa_supplicant -iwlan0 -c&#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; -n physical addr add 192.168.12.52&#x2F;24 dev eth0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;wg&lt;&#x2F;span&gt;&lt;span&gt; setconf wg0 &#x2F;etc&#x2F;wireguard&#x2F;wg0.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; addr add 10.2.4.5&#x2F;32 dev wg0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; link set wg0 up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;ip&lt;&#x2F;span&gt;&lt;span&gt; route add default dev wg0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wireguard.com&#x2F;netns&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;container-networking-is-simple&#x2F;&quot;&gt;Container Networking Is Simple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Isovalent Blog: Cilium Service Mesh – Everything You Need to Know</title>
		<published>2022-07-26T00:00:00+00:00</published>
		<updated>2022-07-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220726-isovalent/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220726-isovalent/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Looking at the feature set of a service mesh today, it can be summarized as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resilient Connectivity&lt;&#x2F;strong&gt;: Service to service communication must be possible across boundaries such as clouds, clusters, and premises. Communication must be resilient and fault tolerant.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;L7 Traffic Management&lt;&#x2F;strong&gt;: Load balancing, rate limiting, and resiliency must be L7-aware (HTTP, REST, gRPC, WebSocket, …).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identity-based Security&lt;&#x2F;strong&gt;: Relying on network identifiers to achieve security is no longer sufficient, both the sending and receiving services must be able to authenticate each other based on identities instead of a network identifier.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Observability &amp;amp; Tracing&lt;&#x2F;strong&gt;: Observability in the form of tracing and metrics is critical to understanding, monitoring, and troubleshooting application stability, performance, and availability.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transparency&lt;&#x2F;strong&gt;: The functionality must be available to applications in a transparent manner, i.e. without requiring to change application code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;eBPF-Native When Possible&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If eBPF is not capable of processing the request, for example when connections need to be spliced, requests need to be rate-limited, or TLS termination is required, the handling falls back to Envoy running in either a sidecar or sidecar-free model. This gives the best of both worlds – eBPF processing when possible for increased performance and reduced latency, with the ability always to fall back to Envoy as needed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mTLS for Any Network Protocol&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;By splitting the authentication handshake from the payload transport, we can use TLS 1.3 as the handshake protocol while relying on IPsec or WireGuard as a better-performing, more transparent payload channel.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;cilium-service-mesh&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;2021-12-08-ebpf-servicemesh&#x2F;&quot;&gt;How eBPF will solve Service Mesh – Goodbye Sidecars&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;2022-05-03-servicemesh-security&#x2F;&quot;&gt;Next-Generation Mutual Authentication with Cilium Service Mesh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stack Overflow Blog: Design patterns for asynchronous API communication</title>
		<published>2022-07-26T00:00:00+00:00</published>
		<updated>2022-07-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220726-stackoverflow/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220726-stackoverflow/</id>
		<content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Entity topics: The source of truth&lt;&#x2F;p&gt;
&lt;p&gt;“this is the current state of X”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Event topics: Record of fact&lt;&#x2F;p&gt;
&lt;p&gt;“X happened”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Request and response topics: Async API&lt;&#x2F;p&gt;
&lt;p&gt;“Please do X” → “X has been done”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.blog&#x2F;2022&#x2F;07&#x2F;21&#x2F;event-driven-topic-design-using-kafka&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Inanna Malick Blog: Elegant and performant recursion in Rust</title>
		<published>2022-07-25T00:00:00+00:00</published>
		<updated>2022-07-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220725-inanna-malick/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220725-inanna-malick/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Evaluating an expression language: &lt;code&gt;1 * (2 - 3)&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;boxed pointer traversal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;ExprBoxed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Mul {
&lt;&#x2F;span&gt;&lt;span&gt;    a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(ExprBoxed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;LiteralInt { literal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(ExprBoxed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Sub {
&lt;&#x2F;span&gt;&lt;span&gt;        a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(ExprBoxed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;LiteralInt { literal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(ExprBoxed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;LiteralInt { literal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;cache-local reverse topological fold&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;idx_0:    Mul(idx_1, idx_2)
&lt;&#x2F;span&gt;&lt;span&gt;idx_1:    LiteralInt(1)
&lt;&#x2F;span&gt;&lt;span&gt;idx_2:    Sub(idx_3, idx_4)
&lt;&#x2F;span&gt;&lt;span&gt;idx_3:    LiteralInt(2)
&lt;&#x2F;span&gt;&lt;span&gt;idx_4:    LiteralInt(3)
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cache locality: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Locality_of_reference&quot;&gt;Locality of reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Topological_sorting&quot;&gt;Topological sorting&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functor_(functional_programming)&quot;&gt;Functor (functional programming)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Property_testing&quot;&gt;Property testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;recursion.wtf&#x2F;posts&#x2F;rust_schemes&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;recursion.wtf&#x2F;posts&#x2F;rust_schemes_2&#x2F;&quot;&gt;Fully generic recursion in Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Brandur Blog: Soft Deletion Probably Isn&#x27;t Worth It</title>
		<published>2022-07-20T00:00:00+00:00</published>
		<updated>2022-07-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220720-brandur/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220720-brandur/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Code leakage&lt;&#x2F;strong&gt;: The first is that soft deletion logic bleeds out into all parts of your code. And forgetting that extra predicate on &lt;code&gt;deleted_at&lt;&#x2F;code&gt; can have dangerous consequences as it accidentally returns data that’s no longer meant to be seen.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Losing foreign keys&lt;&#x2F;strong&gt;: Another consequence of soft deletion is that foreign keys are effectively lost. The major benefit of foreign keys is that they guarantee referential integrity. But with soft deletion, this goes out the window. A customer may be soft deleted with its &lt;code&gt;deleted_at&lt;&#x2F;code&gt; flag set, but we’re now back to being able to forget do the same for its invoices.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pruning data is hard&lt;&#x2F;strong&gt;: You may eventually find yourself writing a hard deletion process which looks at soft deleted records beyond a certain horizon and permanently deletes them from the database. But the same foreign keys that soft deletion rendered mostly useless now make this job more difficult because a record can’t be removed without also making sure that all its dependencies are removed as well. And even with liberal testing, this kind of query can still end up being a reliability problem because in case a new dependency is added in the future but an update to the query is forgotten, it’ll suddenly start failing after a year’s (or whatever the hard delete horizon is) delay.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Discouraged and rarely used&lt;&#x2F;strong&gt;: Once again, soft deletion is theoretically a hedge against accidental data loss. As a last argument against it, I’d ask you to consider, realistically, whether undeletion is something that’s ever actually done. The biggest reason for that is that almost always, data deletion also has non-data side effects. Calls may have been made to foreign systems to archive records there, objects may have been removed in blob stores, or servers spun down. The process can’t simply be reversed by setting &lt;code&gt;NULL&lt;&#x2F;code&gt; on &lt;code&gt;deleted_at&lt;&#x2F;code&gt; – equivalent undos need to exist for all those other operations too, and they rarely do.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Alternative - A deleted records table&lt;&#x2F;strong&gt;: Although I’ve never seen an undelete work in practice, soft deletion wasn’t completely useless because we would occasionally use it to refer to deleted data – usually a manual process where someone wanted to see to a deleted object for purposes of assisting with a support ticket or trying to squash a bug. And while I’d argue against the traditional soft deletion pattern due to the downsides listed above, luckily there’s a compromise. Instead of keeping deleted data in the same tables from which it was deleted from, there can be a new relation specifically for storing all deleted data, and with a flexible &lt;code&gt;jsonb&lt;&#x2F;code&gt; column so that it can capture the properties of any other table.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Queries for normal, non-deleted data no longer need to include &lt;code&gt;deleted_at IS NULL&lt;&#x2F;code&gt; everywhere.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Foreign keys still work. Attempting to remove a record without also getting its dependencies is an error.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Hard deleting old records for regulatory requirements gets really, really easy: &lt;code&gt;DELETE FROM deleted_record WHERE deleted_at &amp;lt; now() - &#x27;1 year&#x27;::interval&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Deleted data is a little harder to get at, but not by much, and is still kept around in case someone needs to look at it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brandur.org&#x2F;soft-deletion&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Stack Overflow Blog: How observability is redefining the roles of developers</title>
		<published>2022-07-19T00:00:00+00:00</published>
		<updated>2022-07-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220719-stackoverflow/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220719-stackoverflow/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Developer observability is a new pillar of observability adapted for the needs of developers. Unlike typical observability solutions, it’s aimed directly at developers and not at DevOps. As such, it provides a direct connection between the source code and the observable production.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A good analogy would be that developer observability is like a debugger whereas current observability tools are like a profiler. When you run with a debugger, it doesn’t do much until you add breakpoints to extract information. A profiler constantly gets information while running. Both are very useful and both serve different use cases.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of you might have read this article thinking about remote debugging. This has many drawbacks&#x2F;problems but one shines above all. Imagine a developer in your company placing a breakpoint on the user authentication code and siphoning off user credentials.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.blog&#x2F;2022&#x2F;07&#x2F;18&#x2F;how-observability-is-redefining-the-roles-of-developers&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>matklad: Why LSP?</title>
		<published>2022-07-15T00:00:00+00:00</published>
		<updated>2022-07-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220715-matklad/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220715-matklad/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;The (big) ball on the left is rust-analyzer — a language server. The similarly sized ball on the right is VS Code — an editor. And the small ball in the center is the code to glue them together, &lt;em&gt;including&lt;&#x2F;em&gt; LSP implementations.&lt;&#x2F;p&gt;
&lt;p&gt;That code is relatively and absolutely tiny. The codebases behind either the language server or the editor are enormous.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To sum the above succinctly, the problem with decent IDE support was not of N * M, but rather of an inadequate equilibrium of a two-sided market.&lt;&#x2F;p&gt;
&lt;p&gt;Language vendors were reluctant to create language servers, because it was hard, the demand was low (= no competition from other languages), and, even if one creates a language server, one would find a dozen editors absolutely unprepared to serve as a host for a smart server.&lt;&#x2F;p&gt;
&lt;p&gt;On the editor’s side, there was little incentive for adding high-level APIs needed for IDEs, because there were no potential providers for those APIs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Action Item for Everyone: Please demand better IDE support!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matklad.github.io&#x2F;2022&#x2F;04&#x2F;25&#x2F;why-lsp.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Read the Tea Leaves: The collapse of complex software</title>
		<published>2022-07-15T00:00:00+00:00</published>
		<updated>2022-07-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220715-nolanlawson/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220715-nolanlawson/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;During the boom, software companies can keep hiring new headcount to manage their existing software (i.e. more engineers to understand more boxes and arrows), but if their labor force is forced to contract, then that same system may become unmaintainable. A rapid and permanent reduction in complexity may be the only long-term solution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing working in complexity’s favor, though, is that engineers &lt;em&gt;like&lt;&#x2F;em&gt; complexity. Admit it: as much as we complain about other people’s complexity, we love our own. We love sitting around and dreaming up new architectural diagrams that can comfortably sit inside our own heads – it’s only when these diagrams leave our heads, take shape in the real world, and outgrow the size of any one person’s head that the problems begin.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Just keep doing the best you can, and try to have a healthy degree of skepticism when some wild-eyed architect wheels out a big diagram with a lot of boxes and arrows.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nolanlawson.com&#x2F;2022&#x2F;06&#x2F;09&#x2F;the-collapse-of-complex-software&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Wandering Thoughts: Some things that make shell scripts have performance issues</title>
		<published>2022-07-15T00:00:00+00:00</published>
		<updated>2022-07-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220715-utoronto/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220715-utoronto/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;One thing that does not make shell scripts slow is the basic Unix commands themselves that you use in shell scripts. Those Unix commands generally perform pretty well, and their processing speed is probably close to the fastest you could get if you wrote what they&#x27;re doing in your language of choice. Your program is unlikely to improve on the sorting performance of sort, the text transformation performance of sed, and so on. And the shell itself generally performs internal things more than fast enough for most cases. Instead, &lt;strong&gt;what causes shell scripts problems is the cost of starting separate programs&lt;&#x2F;strong&gt;. Sed may transform text very fast and sort may sort data very fast, but starting sed or sort is comparatively expensive. The more times you start programs and the more programs you have to start for each thing you want to do, the slower your shell script will run.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shell_builtin&quot;&gt;Shell builtin&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pipeline_(Unix)&quot;&gt;Pipeline (Unix)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;BusyBox#Single_binary&quot;&gt;BusyBox&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;utcc.utoronto.ca&#x2F;%7Ecks&#x2F;space&#x2F;blog&#x2F;programming&#x2F;ShellScriptsAndSpeed&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Government Digital Service: Why we’ve decided to decommission GOV.UK PaaS (Platform as a Service)</title>
		<published>2022-07-13T00:00:00+00:00</published>
		<updated>2022-07-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220713-gds/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220713-gds/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Our growth strategy is obviously not about making profit, but we are a small team at the centre of government and we need to make sure our people and our money are focused on services that have the biggest reach and the most impact.&lt;&#x2F;p&gt;
&lt;p&gt;The big cloud providers (AWS, Azure, GCP and others) have upped their game and reduced the barriers to entry for digital teams.&lt;&#x2F;p&gt;
&lt;p&gt;GOV.UK PaaS has not seen the rapid and continued growth that we’ve seen with some of our other platform products, and is now at a point where we either invest heavily in some significant technical architecture changes, or we make the difficult decision to sunset the product.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gds.blog.gov.uk&#x2F;2022&#x2F;07&#x2F;12&#x2F;why-weve-decided-to-decommission-gov-uk-paas-platform-as-a-service&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>YKarroum: The true cost of linked lists</title>
		<published>2022-07-13T00:00:00+00:00</published>
		<updated>2022-07-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220713-ykarroum/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220713-ykarroum/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Linked lists are often overused in introductory algorithmics courses, due to a heavy focus on theorical complexities. Unfortunatly, in practice, computers are complex beasts. They don’t execute instructions sequentially with the same cost. This means that a data structure with faster theorical complexities does not necessarily translate to a more efficient data structure in practice.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU cache miss: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Locality_of_reference&quot;&gt;Locality of reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Memory allocation cost: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Region-based_memory_management&quot;&gt;Region-based memory management&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ykarroum.com&#x2F;2022&#x2F;05&#x2F;30&#x2F;true-cost-list&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rust: 上手和提升</title>
		<published>2022-07-11T00:00:00+00:00</published>
		<updated>2022-07-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/posts/20220711-rust-onboarding/" type="text/html"/>
		<id>https://blog.vac.fun/posts/20220711-rust-onboarding/</id>
		<content type="html">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;前段时间因为项目需要短期内上手了 Rust，也顺便逛了一圈 Rust 的生态，这里记录一下学习的经验。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yao-shi-rust&quot;&gt;什么是 Rust？&lt;&#x2F;h2&gt;
&lt;p&gt;一门&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Programming_language&quot;&gt;编程语言&lt;&#x2F;a&gt;, &lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Memory_safety&quot;&gt;memory safe&lt;&#x2F;a&gt; without &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Garbage_collection_(computer_science)&quot;&gt;garbage collection&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Technology from the past come to save the future from itself&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Graydon Hoare (Rust 创始人)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;官网&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rust_(programming_language)&quot;&gt;维基百科&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;reference&#x2F;influences.html&quot;&gt;Influenced by&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;和 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Go_(programming_language)&quot;&gt;Go&lt;&#x2F;a&gt; 一样，我觉得它们都很现代。&lt;&#x2F;p&gt;
&lt;p&gt;如果听腻了 &lt;code&gt;Performance&lt;&#x2F;code&gt;, &lt;code&gt;Reliability&lt;&#x2F;code&gt;, &lt;code&gt;Productivity&lt;&#x2F;code&gt;，我告诉你一个我在 Rust 上学到的新词：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ergonomic&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ergonomics&lt;&#x2F;strong&gt; is a measure of the friction you experience when trying to get things done with a tool.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2017&#x2F;03&#x2F;02&#x2F;lang-ergonomics.html&quot;&gt;Rust&#x27;s language ergonomics initiative&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Doing so is a clear &lt;strong&gt;ergonomic&lt;&#x2F;strong&gt; win.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;0141-lifetime-elision.html&quot;&gt;Rust RFC 0141 - lifetime elision&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This proposal will improve the &lt;strong&gt;ergonomics&lt;&#x2F;strong&gt; of the Rust language for development of command-line tools and &amp;quot;back end&amp;quot; &#x2F; &amp;quot;computational kernel&amp;quot; programs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;1869-eprintln.html&quot;&gt;Rust RFC 1869 - eprintln&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Better &lt;strong&gt;ergonomics&lt;&#x2F;strong&gt; for pattern-matching on references.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2005-match-ergonomics.html&quot;&gt;Rust RFC 2005 - match &lt;strong&gt;ergonomics&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Add async &amp;amp; await syntaxes to make it more &lt;strong&gt;ergonomic&lt;&#x2F;strong&gt; to write code manipulating futures.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2394-async_await.html&quot;&gt;Rust RFC 2394 - async await&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The main motivation for this RFC is improving readability, &lt;strong&gt;ergonomics&lt;&#x2F;strong&gt;, and reducing paper cuts.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2497-if-let-chains.html&quot;&gt;Rust RFC 2497 - if let chains&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;axum&lt;&#x2F;code&gt; is a web application framework that focuses on &lt;strong&gt;ergonomics&lt;&#x2F;strong&gt; and modularity.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;axum&quot;&gt;axum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;async fn(Request) -&amp;gt; Result&amp;lt;Response, Error&amp;gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tower is a library of modular and reusable components for building robust networking clients and servers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tower-rs&#x2F;tower&quot;&gt;Tower&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust makes systems programming accessible. - Kosinix&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brson.github.io&#x2F;fireflowers&#x2F;&quot;&gt;fireflowers - The Rust Programming Language, in the words of its practitioners&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-ru-men&quot;&gt;Rust 入门&lt;&#x2F;h2&gt;
&lt;p&gt;刚开始入门，学习资源限制在如下三个就足够了：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustlings&quot;&gt;rustlings&lt;&#x2F;a&gt; &lt;del&gt;Jedi Younglings&lt;&#x2F;del&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Small exercises to get you used to reading and writing Rust code.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;index.html&quot;&gt;The Book&lt;&#x2F;a&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;The Rust Programming Language&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;index.html&quot;&gt;Rust by Example&lt;&#x2F;a&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Learn Rust with examples&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;先让自己对这门语言关键的概念有个印象，避免刻意套用以往的编程经验，试着去接受和理解 Rust 的独特之处，入个门没那么难。把 &lt;code&gt;rustlings&lt;&#x2F;code&gt; 的全部小练习打通关后，就可以算是初步入门了，下面是我通关时出现的彩蛋 &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;🎉 All exercises completed! 🎉
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+----------------------------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|          You made it to the Fe-nish line!          |
&lt;&#x2F;span&gt;&lt;span&gt;+--------------------------  ------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;                          \\&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     ▒▒          ▒▒▒▒▒▒▒▒      ▒▒▒▒▒▒▒▒          ▒▒
&lt;&#x2F;span&gt;&lt;span&gt;   ▒▒▒▒  ▒▒    ▒▒        ▒▒  ▒▒        ▒▒    ▒▒  ▒▒▒▒
&lt;&#x2F;span&gt;&lt;span&gt;   ▒▒▒▒  ▒▒  ▒▒            ▒▒            ▒▒  ▒▒  ▒▒▒▒
&lt;&#x2F;span&gt;&lt;span&gt; ░░▒▒▒▒░░▒▒  ▒▒            ▒▒            ▒▒  ▒▒░░▒▒▒▒
&lt;&#x2F;span&gt;&lt;span&gt;   ▓▓▓▓▓▓▓▓  ▓▓      ▓▓██  ▓▓  ▓▓██      ▓▓  ▓▓▓▓▓▓▓▓
&lt;&#x2F;span&gt;&lt;span&gt;     ▒▒▒▒    ▒▒      ████  ▒▒  ████      ▒▒░░  ▒▒▒▒
&lt;&#x2F;span&gt;&lt;span&gt;       ▒▒  ▒▒▒▒▒▒        ▒▒▒▒▒▒        ▒▒▒▒▒▒  ▒▒
&lt;&#x2F;span&gt;&lt;span&gt;         ▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▓▓▒▒▓▓▒▒▒▒▒▒▒▒
&lt;&#x2F;span&gt;&lt;span&gt;           ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
&lt;&#x2F;span&gt;&lt;span&gt;             ▒▒▒▒▒▒▒▒▒▒██▒▒▒▒▒▒██▒▒▒▒▒▒▒▒▒▒
&lt;&#x2F;span&gt;&lt;span&gt;           ▒▒  ▒▒▒▒▒▒▒▒▒▒██████▒▒▒▒▒▒▒▒▒▒  ▒▒
&lt;&#x2F;span&gt;&lt;span&gt;         ▒▒    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ▒▒
&lt;&#x2F;span&gt;&lt;span&gt;       ▒▒    ▒▒    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ▒▒    ▒▒
&lt;&#x2F;span&gt;&lt;span&gt;       ▒▒  ▒▒    ▒▒                  ▒▒    ▒▒  ▒▒
&lt;&#x2F;span&gt;&lt;span&gt;           ▒▒  ▒▒                      ▒▒  ▒▒
&lt;&#x2F;span&gt;&lt;span&gt;We hope you enjoyed learning about the various aspects of Rust!
&lt;&#x2F;span&gt;&lt;span&gt;If you noticed any issues, please don&amp;#39;t hesitate to report them to our repo.
&lt;&#x2F;span&gt;&lt;span&gt;You can also contribute your own exercises to help the greater community!
&lt;&#x2F;span&gt;&lt;span&gt;Before reporting an issue or contributing, please read our guidelines:
&lt;&#x2F;span&gt;&lt;span&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustlings&#x2F;blob&#x2F;main&#x2F;CONTRIBUTING.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rust-kai-fa-huan-jing&quot;&gt;Rust 开发环境&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码编辑器：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;vscode&quot;&gt;VS Code&lt;&#x2F;a&gt;, 搭配 &lt;code&gt;rust-analyzer&lt;&#x2F;code&gt; 和 &lt;code&gt;Even Better TOML&lt;&#x2F;code&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; 两个插件&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Language Server 支持: &lt;a href=&quot;https:&#x2F;&#x2F;rust-analyzer.github.io&quot;&gt;rust-analyzer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;代码质量必备：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustfmt&quot;&gt;rustfmt&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;clippy&lt;&#x2F;a&gt;, 使用如下配置&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;[rust]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;editor.formatOnSave&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;rust-analyzer.checkOnSave.command&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;clippy&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;依赖安全：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustSec&#x2F;cargo-audit&quot;&gt;cargo-audit&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kbknapp&#x2F;cargo-outdated&quot;&gt;cargo-outdated&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;额外推荐：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rui314&#x2F;mold&quot;&gt;mold&lt;&#x2F;a&gt;（一款现代链接器）, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sccache&quot;&gt;sccache&lt;&#x2F;a&gt;（编译缓存）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-shi-ji-kai-fa&quot;&gt;Rust 实际开发&lt;&#x2F;h2&gt;
&lt;p&gt;这个阶段应该是最难熬的，除了前面提到的学习资源，这里再增加一些常用的参考资料，另外也别忘了多使用&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Comparison_of_web_search_engines&quot;&gt;搜索引擎&lt;&#x2F;a&gt;和 &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&quot;&gt;Stack Overflow&lt;&#x2F;a&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;&quot;&gt;std&lt;&#x2F;a&gt;: Rust 标准库&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&quot;&gt;docs.rs&lt;&#x2F;a&gt;: 官方软件仓库和在线文档&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;api-guidelines&#x2F;&quot;&gt;api guidelines&lt;&#x2F;a&gt;: Rust API 风格指南&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cheats.rs&quot;&gt;cheats.rs&lt;&#x2F;a&gt;: Rust 速查表&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;你需要磨合一段时间才能适应 Rust 特有的 &lt;em&gt;&lt;code&gt;Ownership&lt;&#x2F;code&gt;&lt;&#x2F;em&gt; 和 &lt;em&gt;&lt;code&gt;Borrow Checker&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;，其他对你而言陌生的概念也需要时间去熟悉，根据项目需求着手一些实际的功能，模仿、借鉴和延伸接触的 demo 和例子，注意模块划分、错误处理、架构抽象，花上点心思不用多久就可以上手 Rust 开发。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-sheng-tai-bei-jing&quot;&gt;Rust 生态背景&lt;&#x2F;h2&gt;
&lt;p&gt;我一直提倡不要孤立地看待一门编程语言，了解这门语言所围绕的生态，认识它的历史渊源和演进过程，这对你的长期技术成长大有裨益。下面是我推荐的一些信息来源：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&quot;&gt;Rust Blog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;master&#x2F;RELEASES.md&quot;&gt;Releases&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;&quot;&gt;RFCs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&quot;&gt;This Week in Rust&lt;&#x2F;a&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&quot;&gt;GitHub&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&quot;&gt;Hacker News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-jin-jie&quot;&gt;Rust 进阶&lt;&#x2F;h2&gt;
&lt;p&gt;不管你最终能走多远，只要是尝试了我都认可你：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;reference&#x2F;&quot;&gt;reference&lt;&#x2F;a&gt;: Rust 语言参考&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;nomicon&#x2F;&quot;&gt;nomicon&lt;&#x2F;a&gt;: &lt;code&gt;The Dark Arts of Advanced and Unsafe Rust Programming&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;源码阅读: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&quot;&gt;rust&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xie-zai-zui-hou&quot;&gt;写在最后&lt;&#x2F;h2&gt;
&lt;p&gt;没有事物是完美的，Rust 也一样，不要陷入无谓的语言之争，很多技术都得看场景和环境。我用一句古文结束这篇博客：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;“它山之石，可以攻玉”&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Rust 吉祥物 &lt;a href=&quot;https:&#x2F;&#x2F;rustacean.net&quot;&gt;Ferris&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;TOML 文件格式支持, 可选&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;往期也可以回顾，里面有不少精华内容&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>FS Blog: How to Fail at Almost Everything and Still Win Big</title>
		<published>2022-07-11T00:00:00+00:00</published>
		<updated>2022-07-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220711-fs/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220711-fs/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. Do Creative Work First&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The way I approach the problem of multiple priorities is by focusing on just one main metric: my energy. I make choices that maximize my personal energy because that makes it easier to manage all of the other priorities.&lt;&#x2F;p&gt;
&lt;p&gt;One of the most important tricks for maximizing your productivity involves matching your mental state to the task.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2. On Expecting People to Be Reasonable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If your view of the world is that people use reason for their important decisions, you are setting yourself up for a life of frustration and confusion. You’ll find yourself continually debating people and never winning except in your own mind. Few things are as destructive and limiting as a worldview that assumes people are mostly rational.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;3. The Most Important Form of Selfishness&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The most important form of selfishness involves spending time on your fitness, eating right, pursuing your career, and still spending quality time with your family and friends.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;4. Withholding Praise is Immoral&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Children are accustomed to a continual stream of criticisms and praise, but adults can go weeks without a compliment while enduring criticism both at work and at home. Adults are starved for a kind word. When you understand the power of honest praise (as opposed to bullshitting, flattery, and sucking up), you realize that withholding it borders on immoral. If you see something that impresses you, a decent respect to humanity insists you voice your praise.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;5. Don’t Read the News for Truth&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I don’t read the news to find truth, as that would be a foolish waste of time. I read the news to broaden my exposure to new topics and patterns that make my brain more efficient in general and to enjoy myself, because learning interesting things increases my energy and makes me feel optimistic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;6. Fake it Till you Make it&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[W]e are designed to become in reality however we act. We fake it until it becomes real. Our core personality doesn’t change, but we quickly adopt the mannerisms and skills associated with our new status and position.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;7. Change Your Mind&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[Y]ou shouldn’t hesitate to modify your perceptions to whatever makes you happy, because you’re probably wrong about the underlying nature of reality anyway.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;8. Systems Trump Goals&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you do something every day, it’s a system. If you’re waiting to achieve it someday in the future, it’s a goal.&lt;&#x2F;p&gt;
&lt;p&gt;…&lt;&#x2F;p&gt;
&lt;p&gt;[O]ne should have a system instead of a goal. The system-versus-goals model can be applied to most human endeavours. In the world of dieting, losing twenty pounds is a goal, but eating right is a system. In the exercise realm, running a marathon in under four hours is a goal, but exercising daily is a system. In business, making a million dollars is a goal, but being a serial entrepreneur is a system.&lt;&#x2F;p&gt;
&lt;p&gt;…&lt;&#x2F;p&gt;
&lt;p&gt;Goal-oriented people exist in a state of continuous pre-success failure at best, and permanent failure at worst if things never work out. Systems people succeed every time they apply their systems, in the sense that they did what they intended to do. The goals people are fighting the feeling of discouragement at each turn. The systems people are feeling good every time they apply their system. That’s a big difference in terms of maintaining your personal energy in the right direction. …&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;9. Psychology Matters&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On a scale of one to ten, the importance of understanding psychology is a solid ten.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;10. Consider How You Look&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Realistically, most people have poor filters for sorting truth from fiction, and there’s no objective way to know if you’re particularly good at it or not. Consider the people who routinely disagree with you. See how confident they look while being dead wrong? That’s exactly how you look to them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fs.blog&#x2F;scott-adams-fail-at-everything&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Irrational Exuberance: How to safely think in systems</title>
		<published>2022-07-10T00:00:00+00:00</published>
		<updated>2022-07-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220710-irrational-exuberance/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220710-irrational-exuberance/</id>
		<content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When your model and reality conflict, reality is always right&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Models are immutable, but reality isn’t&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Every model omits information; some omit critical information&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lethain.com&#x2F;how-to-safely-think-in-systems&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Honeycomb Blog: Tracking On-Call Health</title>
		<published>2022-07-09T00:00:00+00:00</published>
		<updated>2022-07-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220709-honeycomb/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220709-honeycomb/</id>
		<content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The ability to &lt;strong&gt;respond&lt;&#x2F;strong&gt;. Knowing what to do, or being able to respond to regular and
irregular changes, disturbances, and opportunities by activating prepared actions or by
adjusting current mode of functioning.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The ability to &lt;strong&gt;monitor&lt;&#x2F;strong&gt;. Knowing what to look for, or being able to monitor that which
is or could seriously affect the system’s performance in the near term3 – positively or
negatively. The monitoring must cover the system’s own performance as well as what
happens in the environment.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The ability to &lt;strong&gt;learn&lt;&#x2F;strong&gt;. Knowing what has happened, or being able to learn from
experience, in particular to learn the right lessons from the right experience.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The ability to &lt;strong&gt;anticipate&lt;&#x2F;strong&gt;. Knowing what to expect, or being able to anticipate
developments further into the future, such as potential disruptions, novel demands or
constraints, new opportunities, or changing operating conditions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;erikhollnagel.com&#x2F;onewebmedia&#x2F;RAG%20Outline%20V2.pdf&quot;&gt;Resilience Analysis Grid [pdf]&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.honeycomb.io&#x2F;blog&#x2F;tracking-on-call-health&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GitLab Blog: We are splitting our database into Main and CI &amp; Why we&#x27;re sticking with Ruby on Rails</title>
		<published>2022-07-07T00:00:00+00:00</published>
		<updated>2022-07-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220707-gitlab/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220707-gitlab/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;We are splitting our database into Main and CI to improve the scalability and reliability of GitLab.com.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Fabian Zimmer &lt;a href=&quot;https:&#x2F;&#x2F;about.gitlab.com&#x2F;blog&#x2F;2022&#x2F;06&#x2F;02&#x2F;splitting-database-into-main-and-ci&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We don’t need microservices&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Architecture follows needs, not the other way around.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Luckily, only a tiny part of most codebases is actually performance critical.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;about.gitlab.com&#x2F;blog&#x2F;2022&#x2F;07&#x2F;06&#x2F;why-were-sticking-with-ruby-on-rails&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can&#x27;t build a monolith, what makes you think microservices are the answer?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.codingthearchitecture.com&#x2F;2014&#x2F;07&#x2F;06&#x2F;distributed_big_balls_of_mud.html&quot;&gt;Distributed big balls of mud&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Honeycomb Blog: We Learn Systems by Changing Them</title>
		<published>2022-07-07T00:00:00+00:00</published>
		<updated>2022-07-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220707-honeycomb/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220707-honeycomb/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;It is only possible to come to an understanding of a system of interest by trying to change it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Michael C. Jackson explains Kurt Lewin’s work, in Critical Systems Thinking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.honeycomb.io&#x2F;blog&#x2F;learn-systems-by-changing&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>致敬 hello, world</title>
		<published>2022-07-06T00:00:00+00:00</published>
		<updated>2022-07-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/posts/20220706-hello-world/" type="text/html"/>
		<id>https://blog.vac.fun/posts/20220706-hello-world/</id>
		<content type="html">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;和大学同学聊天偶然提到写博客，我决定尝试写写看。由于平时工作比较忙，所以不太有时间写专业性很强的长篇内容，博客主要会以原创和分享为主，记录自己的学习过程，也顺便练习下表达能力。&lt;&#x2F;p&gt;
&lt;p&gt;为了管理简单，我选择用 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&quot;&gt;Zola&lt;&#x2F;a&gt; 以 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markdown&quot;&gt;Markdown&lt;&#x2F;a&gt; 格式编写博客，模板用的是 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-matthias&#x2F;apollo&quot;&gt;apollo&lt;&#x2F;a&gt;，代码高亮主题为 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arcticicestudio&#x2F;nord&quot;&gt;Nord&lt;&#x2F;a&gt;，目前博客托管在 &lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&quot;&gt;GitHub Pages&lt;&#x2F;a&gt; 上。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dai-ma-gao-liang-xiao-guo-zhan-shi&quot;&gt;代码高亮效果展示&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;go&quot;&gt;Go&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sayHello&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;hello, world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;sayHello&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;rust&quot;&gt;Rust&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;say_hello&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;hello, world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;say_hello&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;python&quot;&gt;Python&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;say_hello&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#88c0d0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;hello, world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;say_hello&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;xie-zai-zui-hou&quot;&gt;写在最后&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You were there at the beginning of this journey, I wish you’d been able to see
the end.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
</feed>
