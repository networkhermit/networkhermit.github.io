<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>hi, I’m vac</title>
	<link href="https://blog.vac.fun/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.vac.fun"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-09-17T00:00:00+00:00</updated>
	<id>https://blog.vac.fun/atom.xml</id>
	<entry xml:lang="en">
		<title>Cloudflare Blog: Log analytics using ClickHouse</title>
		<published>2022-09-17T00:00:00+00:00</published>
		<updated>2022-09-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220917-cloudflare/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220917-cloudflare/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Characteristics of logs&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unpredictable&lt;&#x2F;li&gt;
&lt;li&gt;Semi-structured&lt;&#x2F;li&gt;
&lt;li&gt;Contextual&lt;&#x2F;li&gt;
&lt;li&gt;Write-heavy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;producer, shipper, queue, consumer, datastore (Elasticsearch)&lt;&#x2F;p&gt;
&lt;p&gt;Elasticsearch bottlenecks&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Mapping Explosion&lt;&#x2F;li&gt;
&lt;li&gt;Multi-tenancy support&lt;&#x2F;li&gt;
&lt;li&gt;Cluster operational tasks&lt;&#x2F;li&gt;
&lt;li&gt;Garbage collection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;producer, shipper, queue, inserter, datastore (ClickHouse)&lt;&#x2F;p&gt;
&lt;p&gt;Elasticsearch is great for full-text search and ClickHouse is great for analytics.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;log-analytics-using-clickhouse&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Adaptive_bitrate_streaming&quot;&gt;Adaptive Bit Rate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Simme Blog: Observability is becoming mission critical, but who watches the watchmen?</title>
		<published>2022-09-16T00:00:00+00:00</published>
		<updated>2022-09-16T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220916-simme/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220916-simme/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;What observes the observability stack? How will we be made aware if it is starting to have issues?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Alerts not firing&lt;&#x2F;li&gt;
&lt;li&gt;Telemetry missing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;simme.dev&#x2F;posts&#x2F;who-watches-the-watchmen&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Cloudflare Blog: The story of one latency spike &amp; The revenge of the listening sockets</title>
		<published>2022-09-12T00:00:00+00:00</published>
		<updated>2022-09-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220912-cloudflare/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220912-cloudflare/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Using a large chunk of receive buffer space for the metadata is not really what the programmer
wants. To counter that, when the socket is under memory pressure complex logic is run with the
intention of freeing some space. One of the operations is &lt;code&gt;tcp_collapse&lt;&#x2F;code&gt; and it will merge
adjacent TCP packets into one larger &lt;code&gt;sk_buff&lt;&#x2F;code&gt;. This behavior is pretty much a garbage collection
(GC)—and as everyone knows, when the garbage collection kicks in, the latency must spike.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;the-story-of-one-latency-spike&#x2F;&quot;&gt;The story of one latency spike&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can&#x27;t have a very large number of bound TCP sockets and we learned that the hard way. We
learned a bit about the Linux networking stack: the fact that &lt;code&gt;LHTABLE&lt;&#x2F;code&gt; is fixed size and is
hashed by destination port only.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;revenge-listening-sockets&#x2F;&quot;&gt;The revenge of the listening sockets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Isovalent Blog: Addressing Bandwidth Exhaustion with Cilium Bandwidth Manager &amp; The Rise of Kubernetes and the End of Networking &amp; Security as You Know It. What’s Next?</title>
		<published>2022-09-12T00:00:00+00:00</published>
		<updated>2022-09-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220912-isovalent/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220912-isovalent/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Since inception, part of the core characteristics of Kubernetes have been its outstanding
orchestration and scheduling capabilities. By nature, resources available to the pods are shared
resources and preventing compute starvation is critical. But if we are capable of preventing
compute starvation, shouldn’t we also prevent &lt;em&gt;network&lt;&#x2F;em&gt; starvation?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Cilium removes the need for an IFB (Intermediate Functional Block), therefore reducing the
latency that was introduced with the CNI plugin implementation&lt;&#x2F;li&gt;
&lt;li&gt;Cilium leverages multi-core and multi queue capabilities, ensuring rate-limiting is not
detrimental to performances&lt;&#x2F;li&gt;
&lt;li&gt;Cilium leverages state-of-the-art and optimal congestion avoidance technologies like Earliest
Departure Time and Timing Wheel to reduce latency.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now – platform operators don’t always care &lt;em&gt;how&lt;&#x2F;em&gt; it’s done – they want to know 1) if it works and
2) if it’s easy to operate.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A typical netperf test is called TCP_STREAM and goes from the netperf client to the netperf
server. Therefore a stream from the netperf server to the client will be STREAM backwards –
MAERTS. This is how servers typically operate, with larger data flows going from server to client.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;addressing-bandwidth-exhaustion-with-cilium-bandwidth-manager&#x2F;&quot;&gt;Addressing Bandwidth Exhaustion with Cilium Bandwidth Manager&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;In a few short years, Kubernetes has gone from being a “bleeding edge tech” to the “new enterprise
standard” for how modern applications are built and operated. Enterprises and telcos are now past
the initial “Day 1” challenges (e.g., “which Kubernetes distro do I run?”) and are in the deeper
“Day 2” challenges, with a major focus on how they scalably connect, secure, and observe the
connectivity between these modern API-driven applications.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As organizations look for the best way to solve these challenges on modern Kubernetes platforms
the most obvious technical requirements are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Highly distributed &amp;amp; efficient processing to handle the explosion of east-west communication
(centralized devices become bottlenecks and per-workload “sidecar proxies” are too heavyweight).&lt;&#x2F;li&gt;
&lt;li&gt;Workload identity and API-layer visibility as a first-class construct for both zero-trust
security and observability (since IPs and ports are nearly meaningless in a Kubernetes
environment).&lt;&#x2F;li&gt;
&lt;li&gt;Configurable via standardized and automation-friendly APIs (e.g., Kubernetes CRDs such as
Services, Ingress, NetworkPolicy).&lt;&#x2F;li&gt;
&lt;li&gt;Integrates with legacy networks and legacy workloads running outside of Kubernetes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;isovalent-series-b&#x2F;&quot;&gt;The Rise of Kubernetes and the End of Networking &amp;amp; Security as You Know It. What’s Next?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Cloudflare Blog: 50 Years of The Internet. Work in Progress to a Better Internet</title>
		<published>2022-09-11T00:00:00+00:00</published>
		<updated>2022-09-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220911-cloudflare/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220911-cloudflare/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;The “L” and “O” from the word “LOGIN” had been transmitted successfully in their packets; but that
“G”, wrapped in its own packet, caused the death of that nascent packet network setup. Even today,
software crashes, that’s a solid fact; but this historic crash, is exactly that — historic.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Be conservative in what you send, be liberal in what you accept.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Robustness_principle&quot;&gt;Robustness principle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What’s the use of a protocol if you don’t have software to speak it.&lt;&#x2F;p&gt;
&lt;p&gt;Berkeley’s Unix (or FreeBSD, OpenBSD, NetBSD as its variants are known) is now the basis of every
iPhone, iPad and Mac laptops software in existence. Android’s and Chromebooks come from a
different lineage; but still hold those BSD methodologies as the fundamental basis of all their
networking software.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;50-years-of-the-internet-work-in-progress-to-a-better-internet&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The hardware interfaces, the protocols and the software that implemented the protocols were the
tangible engineering products of that early work. Equally important was the social fabric and
culture that we created. We knew the system would evolve, so we envisioned an open and evolving
architecture.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Depend upon it, sir, when a man knows he is to be hanged in a fortnight, it concentrates his mind
wonderfully.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Samuel Johnson&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;fifty-years-ago&#x2F;&quot;&gt;Fifty Years Ago&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Random_early_detection&quot;&gt;Random early detection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CodeSandbox Blog: How we clone a running VM in 2 seconds</title>
		<published>2022-09-11T00:00:00+00:00</published>
		<updated>2022-09-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220911-codesandbox/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220911-codesandbox/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;improve memory snapshotting: mmap MAP_SHARED&lt;&#x2F;p&gt;
&lt;p&gt;improve cloning memory snapshots: copy-on-write (CoW)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codesandbox.io&#x2F;post&#x2F;how-we-clone-a-running-vm-in-2-seconds&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;firecracker-microvm&#x2F;firecracker&#x2F;blob&#x2F;main&#x2F;docs&#x2F;snapshotting&#x2F;snapshot-support.md&quot;&gt;Firecracker Snapshotting&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File_system_fragmentation&quot;&gt;File system fragmentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>InfraCloud Blog:  Securing Kubernetes Cluster using Kubescape and kube-bench</title>
		<published>2022-09-11T00:00:00+00:00</published>
		<updated>2022-09-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220911-infracloud/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220911-infracloud/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;With businesses adopting cloud native technology, Kubernetes has emerged as a primary tool of
choice for container orchestration. Deploying and managing applications has never been easier.
However, securing clusters has been much like uncharted waters with containers. Attackers find and
exploit new ways to break into the systems while the community works round the clock to protect
it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.infracloud.io&#x2F;blogs&#x2F;securing-kubernetes-cluster-kubescape-kubebench&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubescape&#x2F;kubescape&quot;&gt;Kubescape&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aquasecurity&#x2F;kube-bench&quot;&gt;kube-bench&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Honeycomb Blog: Authors&#x27; Cut—No More Pipeline Blues: Accelerate CI&#x2F;CD with Observability</title>
		<published>2022-09-10T00:00:00+00:00</published>
		<updated>2022-09-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220910-honeycomb/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220910-honeycomb/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Adding observability to your CI&#x2F;CD pipelines will help you address the issues that are costing you
time and money.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.honeycomb.io&#x2F;blog&#x2F;pipeline-blues-cicd-observability&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Naked Security: How to deal with dates and times without any timezone tantrums…</title>
		<published>2022-09-10T00:00:00+00:00</published>
		<updated>2022-09-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220910-nakedsecurity/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220910-nakedsecurity/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;There’s one thing you can do to help, both as a logfile creator and a logfile consumer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Always reduce timestamps to UTC&lt;&#x2F;strong&gt; (universal co-ordinated time), thus factoring timezones out of
your logfiles, and &lt;strong&gt;always record timestamps in a simple, unambiguous, alphabetically sortable
format&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Simply put: consult, &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc3339.txt&quot;&gt;RFC 3339&lt;&#x2F;a&gt;, and stick to &lt;em&gt;Zulu
time&lt;&#x2F;em&gt; timestamps everwhere.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nakedsecurity.sophos.com&#x2F;2022&#x2F;09&#x2F;09&#x2F;hoe-to-deal-with-dates-and-times-without-any-timezone-tantrums&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rosieland: Stop Measuring Community Engagement</title>
		<published>2022-09-10T00:00:00+00:00</published>
		<updated>2022-09-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220910-rosieland/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220910-rosieland/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;good intentions with bad outcomes&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Engagement is Value-Neutral&lt;&#x2F;strong&gt; &#x2F; &lt;strong&gt;Quantity over Quality&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Engagement is just the mechanism for delivering something of value, it’s not the value itself.
Knowing how much engagement you have doesn’t tell you how much value you’re getting. Engagement
that makes a difference is often what can&#x27;t be seen, and consequently (easily) measured. It’s not
even a good proxy measurement or leading indicator. You could deliver less value with more
engagement, or more value with less engagement. At best it’s a vanity metric. At worst it’s
ticking time bomb.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;We should measure what we value, not value what we measure. Unfortunately for us, human psychology
makes the latter inevitable. So our only hope is in the former, measuring what we value.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rosie.land&#x2F;posts&#x2F;stop-measuring-community-engagement&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Go: 认识内存一致性模型</title>
		<published>2022-09-07T00:00:00+00:00</published>
		<updated>2022-09-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/posts/20220907-memory-model/" type="text/html"/>
		<id>https://blog.vac.fun/posts/20220907-memory-model/</id>
		<content type="html">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Go&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;doc&#x2F;go1.19&quot;&gt;1.19&lt;&#x2F;a&gt; 发布时更新了内存一致性模型，刚好可以结合 &lt;a href=&quot;https:&#x2F;&#x2F;swtch.com&#x2F;~rsc&#x2F;&quot;&gt;Russ Cox&lt;&#x2F;a&gt;
之前写的科普向文章一起来理解一下，尽管文章里没有讨论到 &lt;code&gt;GPU&lt;&#x2F;code&gt; 和 &lt;code&gt;Linux Kernel&lt;&#x2F;code&gt; 的内存一致性模型，但
总体上还是有很高的可读性，不记笔记感觉对不起这么好的材料。&lt;&#x2F;p&gt;
&lt;p&gt;P.S. “内存模型”这个名词视语境不同可以有完全不同的解释，我个人建议尽量不要滥用。&lt;&#x2F;p&gt;
&lt;p&gt;memory model:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;address space layout&lt;&#x2F;li&gt;
&lt;li&gt;memory addressing scheme&lt;&#x2F;li&gt;
&lt;li&gt;memory allocation scheme&lt;&#x2F;li&gt;
&lt;li&gt;memory object model&lt;&#x2F;li&gt;
&lt;li&gt;memory ordering&lt;&#x2F;li&gt;
&lt;li&gt;memory segmentation&lt;&#x2F;li&gt;
&lt;li&gt;type layout&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;research.swtch.com&#x2F;mm&quot;&gt;Memory Models&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;research.swtch.com&#x2F;hwmm&quot;&gt;Hardware Memory Models&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;research.swtch.com&#x2F;plmm&quot;&gt;Programming Language Memory Models&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;research.swtch.com&#x2F;gomm&quot;&gt;Updating the Go Memory Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;ref&#x2F;mem&quot;&gt;The Go Memory Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;torvalds&#x2F;linux&#x2F;tree&#x2F;master&#x2F;tools&#x2F;memory-model&#x2F;Documentation&quot;&gt;Linux-Kernel Memory Model (LKMM)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Standard library:
&lt;ul&gt;
&lt;li&gt;Go: &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;sync&#x2F;atomic&quot;&gt;atomic&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;sync&quot;&gt;sync&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rust: &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;sync&#x2F;atomic&#x2F;&quot;&gt;atomic&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;sync&#x2F;&quot;&gt;sync&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;C++: &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;atomic&quot;&gt;atomic&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;thread&quot;&gt;sync&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;C: &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;c&#x2F;atomic&quot;&gt;atomic&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;c&#x2F;thread&quot;&gt;sync&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bi-ji-zheng-li&quot;&gt;笔记整理&lt;&#x2F;h2&gt;
&lt;p&gt;memory consistency model:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;about the visibility and consistency of memory operations in multithreaded contexts&lt;&#x2F;li&gt;
&lt;li&gt;cross-disciplinary contract: hardware &amp;lt;-&amp;gt; compilers &amp;lt;-&amp;gt; programmers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;valid optimizations do not change the behavior of valid programs&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;processor optimizations: largely revolves around how writes are propagated to other threads&lt;&#x2F;li&gt;
&lt;li&gt;compiler optimizations: largely revolves around reordering of instructions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;data-race-race-condition&quot;&gt;Data Race ∈ Race Condition&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Every race involves at least one write: two uncoordinated reads do not race with each other.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;scpv-sequential-consistency-per-variable-at-atomicity-hb-happens-before-pb-propagates-before&quot;&gt;SCPV (sequential consistency per variable), AT (Atomicity), HB (Happens-before), PB (Propagates-before)&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The total order over all the synchronizing operations is separate from the happens-before
relationship. It is &lt;em&gt;not&lt;&#x2F;em&gt; true that there is a happens-before edge in one direction or the other
between every lock, unlock, or volatile variable access in a program: you only get a
happens-before edge from a write to a read that observes the write.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;guan-jian-yuan-zi-zhi-ling&quot;&gt;关键原子指令&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;read–modify–write (RMW)&lt;&#x2F;li&gt;
&lt;li&gt;compare-and-swap (CAS)&lt;&#x2F;li&gt;
&lt;li&gt;load-linked&#x2F;store-conditional (LL&#x2F;SC) &#x2F; load-reserved&#x2F;store-conditional (LR&#x2F;SC)&lt;&#x2F;li&gt;
&lt;li&gt;load-acquire&#x2F;store-release (LDAR&#x2F;STLR)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ying-jian-nei-cun-mo-xing-symmetric-multiprocessing&quot;&gt;硬件内存模型 (Symmetric multiprocessing)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Sequential Consistency: the ideal model&lt;&#x2F;li&gt;
&lt;li&gt;Total Store Order (TSO): &lt;code&gt;x86&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Weak Consistency: &lt;code&gt;RISC-V&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Relaxed Consistency: &lt;code&gt;ARM&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Data-Race-Free Sequential Consistency (DRF-SC): current consensus&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The gap between what is allowed and what is observed makes for unfortunate future surprises:
hardware implementing a stronger model than technically guaranteed encourages dependence on the
stronger behavior and means that future, weaker hardware will break programs, validly or not.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;bian-cheng-yu-yan-nei-cun-mo-xing-concurrency&quot;&gt;编程语言内存模型 (Concurrency)&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;All modern hardware guarantees coherence, which can also be viewed as sequential consistency for
the operations on a single memory location. It turns out that, because of program reordering
during compilation, modern languages do not even provide coherence.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Coherence is easier for hardware to provide than for compilers because hardware can apply dynamic
optimizations: it can adjust the optimization paths based on the exact addresses involved in a
given sequence of memory reads and writes. In contrast, compilers can only apply static
optimizations: they have to write out, ahead of time, an instruction sequence that will be correct
no matter what addresses and values are involved.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Threads Cannot Be Implemented As a Library&lt;&#x2F;em&gt;: languages cannot be silent about the semantics of
multithreaded execution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DRF-SC
&lt;ul&gt;
&lt;li&gt;happens-before relation through synchronization operations&lt;&#x2F;li&gt;
&lt;li&gt;total order with interleaved execution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;atomics (atomic variables&#x2F;atomic operations)
&lt;ul&gt;
&lt;li&gt;non-synchronizing
&lt;ul&gt;
&lt;li&gt;relaxed: for hiding races, provide no ordering, cannot be used to build new synchronization
primitives&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;synchronizing (message receive&#x2F;message send)
&lt;ul&gt;
&lt;li&gt;sequentially consistent (strong)&lt;&#x2F;li&gt;
&lt;li&gt;acquire&#x2F;release (weak): coherence-only, provide limited ordering, create happens-before
relation but do not provide DRF-SC&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;memory barriers&#x2F;fences&lt;&#x2F;li&gt;
&lt;li&gt;high-level synchronization mechanisms
&lt;ul&gt;
&lt;li&gt;semaphore (binary semaphore&#x2F;counting semaphore)&lt;&#x2F;li&gt;
&lt;li&gt;spinlock&lt;&#x2F;li&gt;
&lt;li&gt;barrier&lt;&#x2F;li&gt;
&lt;li&gt;mutex&lt;&#x2F;li&gt;
&lt;li&gt;readers–writer lock&lt;&#x2F;li&gt;
&lt;li&gt;condition variable (signal&#x2F;notify_one and broadcast&#x2F;notify_all)&lt;&#x2F;li&gt;
&lt;li&gt;monitor&lt;&#x2F;li&gt;
&lt;li&gt;channel (buffered&#x2F;unbuffered)&lt;&#x2F;li&gt;
&lt;li&gt;atomic reference counting&lt;&#x2F;li&gt;
&lt;li&gt;once&lt;&#x2F;li&gt;
&lt;li&gt;pool&lt;&#x2F;li&gt;
&lt;li&gt;future (explicit&#x2F;implicit)&lt;&#x2F;li&gt;
&lt;li&gt;futex&lt;&#x2F;li&gt;
&lt;li&gt;sequence lock&lt;&#x2F;li&gt;
&lt;li&gt;read-copy-update&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;semantics for racy programs
&lt;ul&gt;
&lt;li&gt;defines the behavior and possible results&lt;&#x2F;li&gt;
&lt;li&gt;as undefined behavior: DRF-SC or Catch Fire&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;distinguish invalid compiler optimizations&lt;&#x2F;li&gt;
&lt;li&gt;prohibit paradoxes like out-of-thin-air values (acausality)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;xie-zai-zui-hou&quot;&gt;写在最后&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When it comes to programs with races, both programmers and compilers should remember the advice:
don&#x27;t be clever. (Clear is better than clever.)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Felienne Blog: Code Reading Club</title>
		<published>2022-09-01T00:00:00+00:00</published>
		<updated>2022-09-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220901-felienne/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220901-felienne/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;Programmers in generally are really poorly equipped to &lt;em&gt;read&lt;&#x2F;em&gt; code, even their own code, but
especially code written by others.&lt;&#x2F;p&gt;
&lt;p&gt;Programmers read code less linearly than natural language; they follow the call stack rather than
reading from top to bottom.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.felienne.com&#x2F;archives&#x2F;6472&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ASPLOS Paper: Frightening Small Children and Disconcerting Grown-ups: Concurrency in the Linux Kernel</title>
		<published>2022-08-31T00:00:00+00:00</published>
		<updated>2022-08-31T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220831-asplos/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220831-asplos/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;All in all, our LK model specifies the cumulative effect of a language-level model (the subset of
C specific to the LK) and the hardware models targeted by the LK.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;10.1145&#x2F;3173162.3177156&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1608.07531&quot;&gt;Syntax and semantics of the weak consistency model specification language cat&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1308.6810&quot;&gt;Herding Cats: Modelling, Simulation, Testing, and Data Mining for Weak Memory&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ivan Velichko: Reverse Proxy, HTTP Keep-Alive Timeout, and sporadic HTTP 502s</title>
		<published>2022-08-27T00:00:00+00:00</published>
		<updated>2022-08-27T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220827-iximiuz/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220827-iximiuz/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;HTTP Keep-Alive between a reverse proxy and an upstream server combined with some misfortunate
downstream- and upstream-side timeout settings can make clients receiving HTTP 502s from the
proxy.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;reverse-proxy-http-keep-alive-and-502s&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tessian.com&#x2F;blog&#x2F;how-to-fix-http-502-errors&#x2F;&quot;&gt;A Solution to HTTP 502 Errors with AWS ALB&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HTTP_persistent_connection&quot;&gt;HTTP persistent connection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Die wunderbare Welt von Isotopp: fork, exec, wait and exit</title>
		<published>2022-08-26T00:00:00+00:00</published>
		<updated>2022-08-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220826-koehntopp/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220826-koehntopp/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.koehntopp.info&#x2F;2020&#x2F;12&#x2F;28&#x2F;fork-exec-wait-and-exit.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;how-to-on-processes&#x2F;&quot;&gt;How to on starting processes (mostly in Linux)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fork_(system_call)&quot;&gt;fork (system call)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Exec_(system_call)&quot;&gt;exec (system call)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Wait_(system_call)&quot;&gt;wait (system call)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Exit_(system_call)&quot;&gt;exit (system call)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dup_(system_call)&quot;&gt;dup (system call)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pipeline_(Unix)&quot;&gt;Pipeline (Unix)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spawn_(computing)&quot;&gt;Spawn (computing)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fork%E2%80%93exec&quot;&gt;Fork–exec&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fork_bomb&quot;&gt;Fork bomb&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Process_(computing)&quot;&gt;Process (computing)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Parent_process&quot;&gt;Parent process&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Child_process&quot;&gt;Child process&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Signal_(IPC)&quot;&gt;Signal (IPC)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Orphan_process&quot;&gt;Orphan process&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zombie_process&quot;&gt;Zombie process&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Process_group&quot;&gt;Process group&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>LWN: Docker and the OCI container ecosystem &amp; The container orchestrator landscape</title>
		<published>2022-08-26T00:00:00+00:00</published>
		<updated>2022-08-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://blog.vac.fun/prism/20220826-lwn/" type="text/html"/>
		<id>https://blog.vac.fun/prism/20220826-lwn/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;902049&#x2F;&quot;&gt;Docker and the OCI container ecosystem&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;905164&#x2F;&quot;&gt;The container orchestrator landscape&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;containers-vs-pods&#x2F;&quot;&gt;Containers vs. Pods - Taking a Deeper Look&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iximiuz.com&#x2F;en&#x2F;posts&#x2F;kubernetes-ephemeral-containers&#x2F;&quot;&gt;Kubernetes Ephemeral Containers and kubectl debug Command&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linux_namespaces&quot;&gt;Linux namespaces&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cgroups&quot;&gt;cgroups&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Union_mount&quot;&gt;Union mount&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Seccomp&quot;&gt;seccomp&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;OCI &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;opencontainers&#x2F;runtime-spec&quot;&gt;Runtime&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;opencontainers&#x2F;image-spec&quot;&gt;Image&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;opencontainers&#x2F;distribution-spec&quot;&gt;Distribution&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;cri-api&quot;&gt;CRI&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containernetworking&#x2F;cni&quot;&gt;CNI&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;container-storage-interface&#x2F;spec&quot;&gt;CSI&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
