<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>hi, I‚Äôm vac</title>
    <link href="https://blog.vac.fun/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://blog.vac.fun"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-07-23T00:00:00+00:00</updated>
    <id>https://blog.vac.fun/atom.xml</id>
    <entry xml:lang="en">
        <title>mahesh&#x27;s blog: What we talk about when we talk about System Design</title>
        <published>2023-07-23T00:00:00+00:00</published>
        <updated>2023-07-23T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20230723-mahesh/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20230723-mahesh/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Late-bind on designs&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The goal of the design process is not to generate a single point solution, but to instead
characterize the design space for a given problem: a single point should then fall naturally out
of that space given the problem constraints. Converging early on a single design is harmful; the
team should have the ability to jump from one part of the space to another right until a solution
is picked.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Each point solution is a DoS attack on the design process&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Talking about individual designs in isolation slows down design. Talking about designs in the
context of the design space accelerates design. New designs should be described in terms of the
design space, so you can immediately convey their relative position compared to other point
solutions.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Think in parallel; Design together; Implement in parallel; Review together&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Certain parts of the design and development process are creative and should be parallelized &#x2F;
sharded, while others require discipline and should be centralized &#x2F; broadcast.&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Talk about the problem, not existing systems&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;Solution Complexity ¬ª Problem Complexity&lt;&#x2F;li&gt;
&lt;li&gt;Solution Bias&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Always talk about a second application&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Practically, even if you are implementing only one app, it helps to always consider a second app
(or even implement one in tests); to prevent application specifics from leaking into the
abstraction.&lt;&#x2F;p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;For each abstraction, build one implementation; plan for a second; hope for a third&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the opposite direction, you don‚Äôt want the abstraction‚Äôs semantics to rely on its
implementation details. One way to ensure this is to talk about multiple implementations in the
design process.&lt;&#x2F;p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Abstraction is not free&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Abstraction is a balancing act between two types of complexity: the complexity of concreteness and
the complexity of abstractness. Each time you add a layer of abstraction, have a precise
characterization for why it has to exist, as well as the division of functionality between this
layer and the ones around it.&lt;&#x2F;p&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Be critical (but about the right things)&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;One way to approach design is to continually de-risk the pieces that are truly unknown; while
deferring work on the pieces that are difficult but known. (In the opposite direction, researchers
need to be more focused on details and practicality, but this happens naturally in an industry
environment).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;maheshba.bitbucket.io&#x2F;blog&#x2F;2023&#x2F;07&#x2F;12&#x2F;Design.html&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Linux Journal: Understanding Bash: Elements of Programming</title>
        <published>2023-05-30T00:00:00+00:00</published>
        <updated>2023-05-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20230530-linuxjournal/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20230530-linuxjournal/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Although Bash is primarily a command interpreter, it&#x27;s also a programming language. Bash supports
variables, functions and has control flow constructs, such as conditional statements and loops.
However, all of this comes with some unusual quirks. This is because Bash attempts to fulfill two
roles at the same time: to be a command interpreter and a programming language‚Äîand there is
tension between the two.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linuxjournal.com&#x2F;content&#x2F;understanding-bash-elements-programming&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LWN: The shrinking role of semaphores</title>
        <published>2023-04-20T00:00:00+00:00</published>
        <updated>2023-04-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20230420-lwn/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20230420-lwn/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;a &lt;em&gt;classic&lt;&#x2F;em&gt; concurrency limiter&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It just goes to show that in the kernel, as elsewhere, old code can persist for a long time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;928026&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Êñ∞Âπ¥Âø´‰πê</title>
        <published>2023-01-10T00:00:00+00:00</published>
        <updated>2023-01-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/posts/20230110-happy-new-year/" type="text/html"/>
        <id>https://blog.vac.fun/posts/20230110-happy-new-year/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Study hard what interests you the most in the most undisciplined, irreverent and original manner
possible.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Richard Feynmann&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Honeycomb Blog: The Future of Ops Is Platform Engineering</title>
        <published>2022-10-08T00:00:00+00:00</published>
        <updated>2022-10-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20221008-honeycomb/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20221008-honeycomb/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Building infrastructure and operational expertise used to be bundled together into a single role.
But the industry is now bifurcating along an infrastructure fault line, and the overlap between
infrastructure-oriented engineers and operationally-minded engineers is swiftly eroding. Engineers
who love this work increasingly have a choice to make. Either you can 1) go deep on infrastructure
by joining a company that does infrastructure as a service, or 2) go broad on operability by
joining a company to help them do as little infrastructure as possible.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Our systems are only getting more complex, more difficult to operate, and simultaneously more
critical to life on earth, which means that operational excellence has never been more desperately
needed (and if you don‚Äôt respect that, üåà you deserve to suffer üåà).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Developer cycles are the scarcest resource in your company, and you want to spend as many of those
as possible on your core product: the crown jewel, the code that makes you a business. Money is
cheaper than engineering cycles, and teams that are focused on their core business will always
outperform teams whose focus is spread across dozens of non-revenue-generating projects. Let
someone else build and run all the dependencies and adjacencies. &lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;platform-engineering-is-what-stands-between-you-and-darkness&quot;&gt;Platform engineering is what stands between you and darkness&lt;&#x2F;h2&gt;
&lt;p&gt;When you start talking about putting software engineers on call for their own code, and generally
being more involved in production, some percentage of the time you will hear back a guttural wail
of despair: &lt;em&gt;&amp;quot;You can&#x27;t expect me to know EVERYTHING about EVERYTHING!&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Quite right; we can‚Äôt. Platform engineering teams are part of the answer to this perfectly
reasonable complaint. It‚Äôs not that you‚Äôre being asked to do or understand more &lt;em&gt;in toto&lt;&#x2F;em&gt;, but the
distribution of labor and responsibility is shifting:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Before&lt;&#x2F;strong&gt;: some engineers wrote code, and some engineers ran code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Now&lt;&#x2F;strong&gt;: all engineers write code, and all engineers run the code they write‚Äîbut we divide the areas
of responsibility by layer or function.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One of the key principles of any developer platform is that &lt;em&gt;it should be easy to do the right
things, and hard to do the wrong things&lt;&#x2F;em&gt;. It should be much simpler and easier to use the blessed
paths than anything else, and there should be friction if you go off the beaten path.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;A strong platform team has an equally deep grounding in operations experience and software
development.&lt;&#x2F;strong&gt; Individuals who are experts in both areas are fairly rare, but you can pull together
a strong, well-rounded &lt;em&gt;team&lt;&#x2F;em&gt; by assembling a mix of SWEs (with some ops experience) and ops or
DevOps engineers (with some software experience) and having them learn and grow from each other.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Platform teams typically work higher up the stack than operations, DevOps, or SRE teams do, and
they involve a great deal less infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;If a company has both a DevOps team and SRE, typically I expect to see the SRE team more on the
frontlines, involved with incidents, telemetry, etc., and DevOps teams more on the backburner,
slinging pipes and plumbing.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;That team should write libraries, generate examples, and drive standardization; ushering in
consistency, predictability, and usability. They should partner with internal teams to evaluate
use cases. They should partner with your vendors as roadmap stakeholders. They might also write
glue code and helper modules to connect disparate data sources and create cohesive visualizations.
Basically, that team becomes an integration point between your organization and the outsourced
work.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.honeycomb.io&#x2F;blog&#x2F;future-ops-platform-engineering&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Baby Steps: What I meant by the &quot;soul of Rust&quot;</title>
        <published>2022-09-21T00:00:00+00:00</published>
        <updated>2022-09-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220921-smallcultfollowing/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220921-smallcultfollowing/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The soul of Rust, to my mind, is definitely &lt;strong&gt;not&lt;&#x2F;strong&gt; being explicit about allocation. Rather, it‚Äôs
about the struggle between a few key values ‚Äî especially &lt;em&gt;productivity&lt;&#x2F;em&gt; and &lt;em&gt;versatility&lt;&#x2F;em&gt; in
tension with &lt;em&gt;transparency&lt;&#x2F;em&gt;. Rust‚Äôs goal has always been to &lt;em&gt;feel&lt;&#x2F;em&gt; like a high-level but with the
performance and control of a &lt;em&gt;low-level&lt;&#x2F;em&gt; one.&lt;&#x2F;p&gt;
&lt;p&gt;Transparent: ‚Äúyou can predict and control low-level details‚Äù&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Transparency gives you control&lt;&#x2F;li&gt;
&lt;li&gt;Transparency can cost performance&lt;&#x2F;li&gt;
&lt;li&gt;Transparency hurts versatility and productivity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;smallcultfollowing.com&#x2F;babysteps&#x2F;blog&#x2F;2022&#x2F;09&#x2F;19&#x2F;what-i-meant-by-the-soul-of-rust&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sysdig Blog: Understanding Kubernetes Evicted Pods</title>
        <published>2022-09-21T00:00:00+00:00</published>
        <updated>2022-09-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220921-sysdig/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220921-sysdig/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Every day, thousands of Pods are evicted from their homes. Stranded and confused, they have to
abandon their previous lifestyle. Some of them even become nodeless. The current society, imposing
higher demands of CPU and memory, is part of the problem.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Preemption eviction
&lt;ul&gt;
&lt;li&gt;Pod Priority Classes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Node-pressure eviction
&lt;ul&gt;
&lt;li&gt;Quality of Service Classes: BestEffort, Burstable, Guaranteed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;API-initiated eviction&lt;&#x2F;li&gt;
&lt;li&gt;Taint-based eviction&lt;&#x2F;li&gt;
&lt;li&gt;Node drain eviction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sysdig.com&#x2F;blog&#x2F;kubernetes-pod-evicted&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cloudflare Blog: How we built Pingora, the proxy that connects Cloudflare to the Internet</title>
        <published>2022-09-18T00:00:00+00:00</published>
        <updated>2022-09-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220918-cloudflare/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220918-cloudflare/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;NGINX worker&#x2F;process architecture limitations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;each request can only be served by a single worker: unbalanced load across all CPU cores,
requests that do CPU heavy or blocking IO tasks can slow down other requests&lt;&#x2F;li&gt;
&lt;li&gt;the connection pool is per worker: poor connection reuse, connection reuse ratio gets worse when
scale up&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;At Cloudflare, we handle traffic across the entire Internet. We have many cases of bizarre and
non-RFC compliant HTTP traffic that we have to support. This is a common dilemma across the HTTP
community and web, where there is tension between strictly following HTTP specifications and
accommodating the nuances of a wide ecosystem of potentially legacy clients or servers. Picking
one side can be a tough job.&lt;&#x2F;p&gt;
&lt;p&gt;In order to satisfy the requirements of Cloudflare&#x27;s position in the HTTP ecosystem, we needed a
robust, permissive, customizable HTTP library that can survive the wilds of the Internet and
support a variety of noncompliant use cases. The best way to guarantee that is to implement our
own.&lt;&#x2F;p&gt;
&lt;p&gt;We chose multithreading over multiprocessing in order to share resources, especially connection
pools, easily.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cloudflare Blog: Log analytics using ClickHouse</title>
        <published>2022-09-17T00:00:00+00:00</published>
        <updated>2022-09-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220917-cloudflare/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220917-cloudflare/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Characteristics of logs&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unpredictable&lt;&#x2F;li&gt;
&lt;li&gt;Semi-structured&lt;&#x2F;li&gt;
&lt;li&gt;Contextual&lt;&#x2F;li&gt;
&lt;li&gt;Write-heavy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;producer, shipper, queue, consumer, datastore (Elasticsearch)&lt;&#x2F;p&gt;
&lt;p&gt;Elasticsearch bottlenecks&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Mapping Explosion&lt;&#x2F;li&gt;
&lt;li&gt;Multi-tenancy support&lt;&#x2F;li&gt;
&lt;li&gt;Cluster operational tasks&lt;&#x2F;li&gt;
&lt;li&gt;Garbage collection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;producer, shipper, queue, inserter, datastore (ClickHouse)&lt;&#x2F;p&gt;
&lt;p&gt;Elasticsearch is great for full-text search and ClickHouse is great for analytics.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;log-analytics-using-clickhouse&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Adaptive_bitrate_streaming&quot;&gt;Adaptive Bit Rate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simme Blog: Observability is becoming mission critical, but who watches the watchmen?</title>
        <published>2022-09-16T00:00:00+00:00</published>
        <updated>2022-09-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220916-simme/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220916-simme/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;What observes the observability stack? How will we be made aware if it is starting to have issues?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Alerts not firing&lt;&#x2F;li&gt;
&lt;li&gt;Telemetry missing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;simme.dev&#x2F;posts&#x2F;who-watches-the-watchmen&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cloudflare Blog: The story of one latency spike &amp; The revenge of the listening sockets</title>
        <published>2022-09-12T00:00:00+00:00</published>
        <updated>2022-09-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220912-cloudflare/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220912-cloudflare/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Using a large chunk of receive buffer space for the metadata is not really what the programmer
wants. To counter that, when the socket is under memory pressure complex logic is run with the
intention of freeing some space. One of the operations is &lt;code&gt;tcp_collapse&lt;&#x2F;code&gt; and it will merge
adjacent TCP packets into one larger &lt;code&gt;sk_buff&lt;&#x2F;code&gt;. This behavior is pretty much a garbage collection
(GC)‚Äîand as everyone knows, when the garbage collection kicks in, the latency must spike.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;the-story-of-one-latency-spike&#x2F;&quot;&gt;The story of one latency spike&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can&#x27;t have a very large number of bound TCP sockets and we learned that the hard way. We
learned a bit about the Linux networking stack: the fact that &lt;code&gt;LHTABLE&lt;&#x2F;code&gt; is fixed size and is
hashed by destination port only.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;revenge-listening-sockets&#x2F;&quot;&gt;The revenge of the listening sockets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Isovalent Blog: Addressing Bandwidth Exhaustion with Cilium Bandwidth Manager &amp; The Rise of Kubernetes and the End of Networking &amp; Security as You Know It. What‚Äôs Next?</title>
        <published>2022-09-12T00:00:00+00:00</published>
        <updated>2022-09-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220912-isovalent/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220912-isovalent/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Since inception, part of the core characteristics of Kubernetes have been its outstanding
orchestration and scheduling capabilities. By nature, resources available to the pods are shared
resources and preventing compute starvation is critical. But if we are capable of preventing
compute starvation, shouldn‚Äôt we also prevent &lt;em&gt;network&lt;&#x2F;em&gt; starvation?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;Cilium removes the need for an IFB (Intermediate Functional Block), therefore reducing the
latency that was introduced with the CNI plugin implementation&lt;&#x2F;li&gt;
&lt;li&gt;Cilium leverages multi-core and multi queue capabilities, ensuring rate-limiting is not
detrimental to performances&lt;&#x2F;li&gt;
&lt;li&gt;Cilium leverages state-of-the-art and optimal congestion avoidance technologies like Earliest
Departure Time and Timing Wheel to reduce latency.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now ‚Äì platform operators don‚Äôt always care &lt;em&gt;how&lt;&#x2F;em&gt; it‚Äôs done ‚Äì they want to know 1) if it works and
2) if it‚Äôs easy to operate.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A typical netperf test is called TCP_STREAM and goes from the netperf client to the netperf
server. Therefore a stream from the netperf server to the client will be STREAM backwards ‚Äì
MAERTS. This is how servers typically operate, with larger data flows going from server to client.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;addressing-bandwidth-exhaustion-with-cilium-bandwidth-manager&#x2F;&quot;&gt;Addressing Bandwidth Exhaustion with Cilium Bandwidth Manager&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;In a few short years, Kubernetes has gone from being a ‚Äúbleeding edge tech‚Äù to the ‚Äúnew enterprise
standard‚Äù for how modern applications are built and operated. Enterprises and telcos are now past
the initial ‚ÄúDay 1‚Äù challenges (e.g., ‚Äúwhich Kubernetes distro do I run?‚Äù) and are in the deeper
‚ÄúDay 2‚Äù challenges, with a major focus on how they scalably connect, secure, and observe the
connectivity between these modern API-driven applications.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As organizations look for the best way to solve these challenges on modern Kubernetes platforms
the most obvious technical requirements are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Highly distributed &amp;amp; efficient processing to handle the explosion of east-west communication
(centralized devices become bottlenecks and per-workload ‚Äúsidecar proxies‚Äù are too heavyweight).&lt;&#x2F;li&gt;
&lt;li&gt;Workload identity and API-layer visibility as a first-class construct for both zero-trust
security and observability (since IPs and ports are nearly meaningless in a Kubernetes
environment).&lt;&#x2F;li&gt;
&lt;li&gt;Configurable via standardized and automation-friendly APIs (e.g., Kubernetes CRDs such as
Services, Ingress, NetworkPolicy).&lt;&#x2F;li&gt;
&lt;li&gt;Integrates with legacy networks and legacy workloads running outside of Kubernetes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isovalent.com&#x2F;blog&#x2F;post&#x2F;isovalent-series-b&#x2F;&quot;&gt;The Rise of Kubernetes and the End of Networking &amp;amp; Security as You Know It. What‚Äôs Next?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cloudflare Blog: 50 Years of The Internet. Work in Progress to a Better Internet</title>
        <published>2022-09-11T00:00:00+00:00</published>
        <updated>2022-09-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220911-cloudflare/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220911-cloudflare/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The ‚ÄúL‚Äù and ‚ÄúO‚Äù from the word ‚ÄúLOGIN‚Äù had been transmitted successfully in their packets; but that
‚ÄúG‚Äù, wrapped in its own packet, caused the death of that nascent packet network setup. Even today,
software crashes, that‚Äôs a solid fact; but this historic crash, is exactly that ‚Äî historic.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Be conservative in what you send, be liberal in what you accept.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Robustness_principle&quot;&gt;Robustness principle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What‚Äôs the use of a protocol if you don‚Äôt have software to speak it.&lt;&#x2F;p&gt;
&lt;p&gt;Berkeley‚Äôs Unix (or FreeBSD, OpenBSD, NetBSD as its variants are known) is now the basis of every
iPhone, iPad and Mac laptops software in existence. Android‚Äôs and Chromebooks come from a
different lineage; but still hold those BSD methodologies as the fundamental basis of all their
networking software.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;50-years-of-the-internet-work-in-progress-to-a-better-internet&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The hardware interfaces, the protocols and the software that implemented the protocols were the
tangible engineering products of that early work. Equally important was the social fabric and
culture that we created. We knew the system would evolve, so we envisioned an open and evolving
architecture.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Depend upon it, sir, when a man knows he is to be hanged in a fortnight, it concentrates his mind
wonderfully.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Samuel Johnson&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;fifty-years-ago&#x2F;&quot;&gt;Fifty Years Ago&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Random_early_detection&quot;&gt;Random early detection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>CodeSandbox Blog: How we clone a running VM in 2 seconds</title>
        <published>2022-09-11T00:00:00+00:00</published>
        <updated>2022-09-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220911-codesandbox/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220911-codesandbox/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;improve memory snapshotting: mmap MAP_SHARED&lt;&#x2F;p&gt;
&lt;p&gt;improve cloning memory snapshots: copy-on-write (CoW)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codesandbox.io&#x2F;post&#x2F;how-we-clone-a-running-vm-in-2-seconds&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;firecracker-microvm&#x2F;firecracker&#x2F;blob&#x2F;main&#x2F;docs&#x2F;snapshotting&#x2F;snapshot-support.md&quot;&gt;Firecracker Snapshotting&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File_system_fragmentation&quot;&gt;File system fragmentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>InfraCloud Blog:  Securing Kubernetes Cluster using Kubescape and kube-bench</title>
        <published>2022-09-11T00:00:00+00:00</published>
        <updated>2022-09-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220911-infracloud/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220911-infracloud/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;With businesses adopting cloud native technology, Kubernetes has emerged as a primary tool of
choice for container orchestration. Deploying and managing applications has never been easier.
However, securing clusters has been much like uncharted waters with containers. Attackers find and
exploit new ways to break into the systems while the community works round the clock to protect
it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.infracloud.io&#x2F;blogs&#x2F;securing-kubernetes-cluster-kubescape-kubebench&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubescape&#x2F;kubescape&quot;&gt;Kubescape&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aquasecurity&#x2F;kube-bench&quot;&gt;kube-bench&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Honeycomb Blog: Authors&#x27; Cut‚ÄîNo More Pipeline Blues: Accelerate CI&#x2F;CD with Observability</title>
        <published>2022-09-10T00:00:00+00:00</published>
        <updated>2022-09-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.vac.fun/prism/20220910-honeycomb/" type="text/html"/>
        <id>https://blog.vac.fun/prism/20220910-honeycomb/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Adding observability to your CI&#x2F;CD pipelines will help you address the issues that are costing you
time and money.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.honeycomb.io&#x2F;blog&#x2F;pipeline-blues-cicd-observability&#x2F;&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
